{"input": "allocate codegen flush masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parallel runtime sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast codegen flush for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "lexer task", "output": "clang/include/clang/Lex/Preprocessor.h::recomputeCurLexerKind"}
{"input": "allocate ast codegen ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel runtime sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate atomic codegen for masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir runtime sema target", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic codegen for ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir runtime sema target task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic flush ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parallel runtime task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast for parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ompirbuilder runtime target", "output": "llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel"}
{"input": "allocate flush ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "declare target", "output": "flang/lib/Semantics/check-omp-structure.h::Enter, flang/lib/Semantics/check-omp-structure.h::Leave, libc/src/math/cosf.h::cosf, libc/src/math/gpu/vendor/amdgpu/amdgpu.h::cosf, libc/src/math/gpu/vendor/amdgpu/declarations.h::__ocml_native_cos_f32, libc/src/math/gpu/vendor/nvptx/declarations.h::__nv_fast_cosf, libc/src/math/gpu/vendor/nvptx/nvptx.h::cosf, openmp/libomptarget/src/omptarget.cpp::AsyncInfo, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::int, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::main, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::square"}
{"input": "allocate ast atomic for ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parallel runtime sema task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast flush for masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for master target task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "allocate flush masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic sema target", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic codegen for ir parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast for ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "distribute requires", "output": "mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWarpgroupMma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmmaGroup, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::warpgroupGemm, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::emitOpError, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::failure, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::isAllowedSizeM, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::success, mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::cvtSMEMAtomic, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::getPredicate"}
{"input": "for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse parser single", "output": "lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::ShouldIgnoreArtificialField, lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h::ShouldIgnoreArtificialField, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel sema task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast flush for ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel runtime sema target", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "codegen for parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir requires sema", "output": "mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp::rewriteInIm2Col, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::img2colIterators, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::success"}
{"input": "ast flush for ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "detach ir", "output": "mlir/lib/Bindings/Python/IRModule.h::clearOperationsInside"}
{"input": "allocate ast atomic codegen flush for masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast declare for sema", "output": "flang/lib/Semantics/check-omp-structure.h::Enter, flang/lib/Semantics/check-omp-structure.h::Leave"}
{"input": "ast ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parse single", "output": "lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::ShouldIgnoreArtificialField, lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h::ShouldIgnoreArtificialField, llvm/lib/Support/YAMLParser.cpp::StringRef, llvm/lib/Support/YAMLParser.cpp::Valid, llvm/lib/Support/YAMLParser.cpp::getDoubleQuotedValue, llvm/lib/Support/YAMLParser.cpp::getPlainValue, llvm/lib/Support/YAMLParser.cpp::getSingleQuotedValue, llvm/lib/Support/YAMLParser.cpp::parseScalarValue, llvm/lib/Support/YAMLParser.cpp::unescapeDoubleQuoted, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/tools/llvm-rc/ResourceScriptParser.cpp::read, llvm/unittests/Support/YAMLParserTest.cpp::Stream, llvm/unittests/Support/YAMLParserTest.cpp::expectCanParseScalar, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::getBlockSize, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::isBlockSparsity, mlir/include/mlir/ExecutionEngine/SparseTensorRuntime.h::getSparseTensorReaderIsSymmetric, mlir/include/mlir/ExecutionEngine/SparseTensorRuntime.h::getSparseTensorReaderRank, mlir/lib/Dialect/SparseTensor/IR/Detail/DimLvlMap.cpp::AffineMap, mlir/lib/Dialect/SparseTensor/IR/SparseTensorDialect.cpp::emitError, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::allocaBuffer, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderDimSize, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderIsSymmetric, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderRank, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::readSparseTensorShape, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::reader"}
{"input": "allocate ast atomic codegen ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/lib/Dialect/SparseTensor/Transforms/CodegenUtils.h::genToCoordinatesBuffer, mlir/lib/Dialect/SparseTensor/Transforms/CodegenUtils.h::genToPositions, mlir/lib/Dialect/SparseTensor/Transforms/CodegenUtils.h::genToValues, mlir/lib/Dialect/SparseTensor/Transforms/CodegenUtils.h::genValMemSize"}
{"input": "allocate codegen for ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "codegen for runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parse target", "output": "clang/tools/driver/cc1_main.cpp::PrintSupportedExtensions, llvm/include/llvm/TargetParser/AArch64TargetParser.h::PrintSupportedExtensions, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/include/mlir/Dialect/GPU/IR/CompilationInterfaces.h::getDefaultCompilationTarget, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::stringifyEnum, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/Dialect/GPU/Transforms/ModuleToBinary.cpp::failure, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::failure, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::success, mlir/lib/Target/LLVM/NVVM/Target.cpp::bin, mlir/lib/Target/LLVM/NVVM/Target.cpp::builder, mlir/lib/Target/LLVM/ROCDL/Target.cpp::builder, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::createKernelLaunch, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::failure, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::getModuleLoadJITFn, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::getSelectedObject, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getArgument, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getDependentDialects, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getDescription, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::registerTestGpuSerializeToCubinPass, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getArgument, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getDependentDialects, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getDescription, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::registerTestGpuSerializeToHsacoPass, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestGpuSerializeToCubinPass, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestGpuSerializeToHsacoPass, mlir/unittests/Target/LLVM/SerializeNVVMTarget.cpp::options, mlir/unittests/Target/LLVM/SerializeROCDLTarget.cpp::options"}
{"input": "allocate ast flush for ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast master target", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "atomic codegen for masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked sema", "output": "mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "flush masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir parallel", "output": "bolt/include/bolt/Core/MCPlusBuilder.h::Lock, clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/include/clang/Parse/Parser.h::ParseOpenACCDirective, clang/include/clang/Parse/Parser.h::ParseOpenACCDirectiveDecl, clang/include/clang/Parse/RAIIObjectsForParser.h::restore, clang/lib/Basic/Targets/NVPTX.h::getGPU, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/CodeGen/Targets/NVPTX.cpp::MaxBlocks, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirective, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirectiveDecl, clang/lib/Parse/ParseOpenACC.cpp::GetOpenACCDirectiveKind, clang/lib/Parse/ParseOpenACC.cpp::ParseOpenACCAtomicDirective, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Parse/Parser.cpp::ParseOpenACCDirective, clang/lib/Parse/Parser.cpp::ParseOpenACCDirectiveDecl, clang/lib/Sema/SemaDeclAttr.cpp::CudaArchToString, clang/lib/Sema/SemaDeclAttr.cpp::TmpAttr, clang/lib/Sema/SemaDeclAttr.cpp::getCudaArch, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, clang/test/ParserOpenACC/parse-constructs.c::func2, clang/test/ParserOpenACC/parse-constructs.c::routine_func, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::OuterAllocaIP, llvm/lib/Target/NVPTX/NVPTXUtilities.cpp::findOneNVVMAnnotation, llvm/lib/Target/NVPTX/NVPTXUtilities.cpp::getMaxClusterRank, llvm/lib/Target/NVPTX/NVPTXUtilities.h::getMaxClusterRank, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::get, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getMnemonic, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getNextID, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getScope, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getState, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::parse, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::print, mlir/include/mlir/Dialect/Linalg/Transforms/SubsetInsertionOpInterfaceImpl.h::registerSubsetOpInterfaceExternalModels, mlir/include/mlir/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.h::registerSubsetOpInterfaceExternalModels, mlir/include/mlir/Interfaces/SubsetOpInterface.h::defaultGetUpdatedDestination, mlir/include/mlir/Interfaces/SubsetOpInterface.h::verifySubsetExtractionOpInterface, mlir/include/mlir/Interfaces/SubsetOpInterface.h::verifySubsetOpInterface, mlir/include/mlir/Target/LLVMIR/ModuleImport.h::processAccessGroupMetadata, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::createAccessGroupMetadata, mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp::success, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::getWarpSizeValue, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::success, mlir/lib/Conversion/SCFToControlFlow/SCFToControlFlow.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getImpl, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getScope, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getState, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::mutate, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::decltype, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyAccessGroups, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyLoopAnnotationAttr, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::failure, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::success, mlir/lib/Dialect/Linalg/IR/LinalgInterfaces.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/SubsetInsertionOpInterfaceImpl.cpp::equivalenceFn, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::emitOpError, mlir/lib/Dialect/SCF/TransformOps/SCFTransformOps.cpp::emitSilenceableError, mlir/lib/Dialect/SCF/Transforms/BufferDeallocationOpInterfaceImpl.cpp::builder, mlir/lib/Dialect/SCF/Transforms/BufferDeallocationOpInterfaceImpl.cpp::failure, mlir/lib/Dialect/Tensor/IR/TensorOps.cpp::failure, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::getContainerOperand, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::operateOnDisjointSubsets, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::operateOnEquivalentSubsets, mlir/lib/Interfaces/SubsetOpInterface.cpp::success, mlir/lib/Interfaces/ValueBoundsOpInterface.cpp::computeConstantBound, mlir/lib/Interfaces/ValueBoundsOpInterface.cpp::failure, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::convertParallelAccesses, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::emitWarning, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::guard, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.h::LoopAnnotationImporter, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.cpp::success, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::createAccessGroupMetadata, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::llvmModule, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::mlirModule"}
{"input": "allocate atomic codegen flush for ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "runtime task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::OuterAllocaIP"}
{"input": "ast atomic codegen parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "sema single", "output": "lld/ELF/Writer.h::canHaveMemtagGlobals"}
{"input": "flush for ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel runtime sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast codegen flush for masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir runtime", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for lexer", "output": "clang/include/clang/Lex/Preprocessor.h::getLangOpts, clang/include/clang/Lex/Preprocessor.h::isIncrementalProcessingEnabled, clang/include/clang/Lex/Preprocessor.h::recomputeCurLexerKind"}
{"input": "ast atomic codegen flush for ir masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for runtime sections", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir runtime sema target", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic codegen ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for sema task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic codegen for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ompirbuilder parallel target", "output": "llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder"}
{"input": "ast for ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir master target task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "allocate ast atomic codegen masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir master requires target task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "flush for masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "distribute for ir requires", "output": "mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWarpgroupMma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmmaGroup, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::warpgroupGemm, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::emitOpError, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::failure, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::isAllowedSizeM, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::success, mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "allocate ast atomic for ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel sema target task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate codegen flush ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parallel runtime sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic flush masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "barrier for", "output": "compiler-rt/lib/builtins/floatdidf.c::__floatdidf, compiler-rt/lib/builtins/floatundidf.c::__floatundidf, compiler-rt/lib/builtins/int_to_fp.h::clzSrcT, compiler-rt/lib/builtins/int_to_fp.h::dstFromRep, compiler-rt/lib/builtins/int_to_fp_impl.inc::__floatXiYf__, compiler-rt/lib/builtins/int_to_fp_impl.inc::dstFromRep, llvm/lib/Transforms/IPO/OpenMPOpt.cpp::hasFunctionEndAsUniqueSuccessor, mlir/include/mlir/Dialect/GPU/Transforms/Passes.h::populateGpuEliminateBarriersPatterns, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::isMbarrierShared, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::memRefDescriptor, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::failure, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::failure, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::getBase, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::getEffectsAfter, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::getEffectsBefore, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::getKnownCapturingStatus, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::hasSingleExecutionBody, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::isFunctionArgument, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::isKnownNoEffectsOpWithoutInterface, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::isParallelRegionBoundary, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::isSequentialLoopLike, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::mayAlias, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::maybeCaptured, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::producesDistinctBase, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::propagatesCapture, mlir/lib/Dialect/GPU/TransformOps/GPUTransformOps.cpp::success, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::failure, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::getBase, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::getEffectsAfter, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::getEffectsBefore, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::getKnownCapturingStatus, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::hasSingleExecutionBody, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::isFunctionArgument, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::isKnownNoEffectsOpWithoutInterface, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::isParallelRegionBoundary, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::isSequentialLoopLike, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::mayAlias, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::maybeCaptured, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::patterns, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::producesDistinctBase, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::propagatesCapture, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::runOnOperation, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::signalPassFailure, mlir/lib/Dialect/GPU/Transforms/EliminateBarriers.cpp::success, mlir/lib/Dialect/NVGPU/TransformOps/NVGPUTransformOps.cpp::buildTryWaitParity"}
{"input": "allocate atomic codegen for masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "requires task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "codegen flush for ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir runtime teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/SemaConcept.cpp::FuncScope, clang/lib/Sema/SemaConcept.cpp::ThisScope, clang/lib/Sema/SemaLambda.cpp::FunctionScopeRAII, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/AST/ast-dump-recovery.cpp::RecoveryForStmtCond, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, clang/test/Sema/attr-target-version.c::__attribute__, clang/test/Sema/attr-target-version.c::cargs, clang/test/SemaCXX/lambda-capture-type-deduction.cpp::__declval, clang/test/SemaCXX/lambda-capture-type-deduction.cpp::__trans_tmp_1, clang/test/SemaCXX/lambda-capture-type-deduction.cpp::fn1, clang/test/SemaCXX/lambda-capture-type-deduction.cpp::operator, clang/test/SemaCXX/this-type-deduction-concept.cpp::begin, clang/test/SemaCXX/this-type-deduction-concept.cpp::empty, clang/test/SemaCXX/this-type-deduction-concept.cpp::operator, flang/lib/Optimizer/Transforms/LoopVersioning.cpp::dump, flang/lib/Optimizer/Transforms/LoopVersioning.cpp::eraseUsage, libc/src/time/linux/clock.cpp::clock_t, libc/src/time/linux/clockGetTimeImpl.h::Error, libcxx/benchmarks/libcxxabi/dynamic_cast_old_stress.bench.cpp::CastTo, libcxx/src/support/win32/locale_win32.cpp::newlocale, libcxxabi/src/private_typeinfo.cpp::dyn_cast_get_derived_info, libcxxabi/src/private_typeinfo.cpp::error_count, libcxxabi/test/dynamic_cast_stress.pass.cpp::main, libcxxabi/test/dynamic_cast_stress.pass.cpp::test, llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::AllocaIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::CodeGenIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::InsertPointTy, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::OuterAllocaIP, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::DebugLoc, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::getDebugLocFromInstOrOperands, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder"}
{"input": "allocate atomic codegen flush for ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for runtime", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/include/mlir/IR/SymbolTable.h::nameBuffer, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::guard, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::success, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::emitOpError, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::failure, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::isWorkgroupMemoryAddressSpace, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::stringifyEnum, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/IR/SymbolTable.cpp::nameBuffer"}
{"input": "allocate for ir ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast atomic codegen flush for masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ompirbuilder target teams", "output": "llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel"}
{"input": "ast flush ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parallel sema teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate atomic codegen masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast simd", "output": "libcxx/include/experimental/__simd/scalar.h::__broadcast, libcxx/include/experimental/__simd/scalar.h::__get, libcxx/include/experimental/__simd/scalar.h::__set, libcxx/include/experimental/__simd/vec_ext.h::__broadcast, libcxx/include/experimental/__simd/vec_ext.h::__get, libcxx/include/experimental/__simd/vec_ext.h::__set"}
{"input": "atomic codegen flush ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for sema task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast atomic flush for ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for frontend ir requires runtime", "output": "clang/include/clang/Basic/LangOptions.h::hasAtExit, clang/lib/CodeGen/CGOpenMPRuntime.cpp::CtorCGF, clang/lib/CodeGen/CGOpenMPRuntime.cpp::DtorCGF, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AMDGPUKernel, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::CUDAKernel, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionAddr, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionPtrs, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/test/libc/global_ctor_dtor.cpp::main"}
{"input": "allocate atomic codegen for ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel runtime sema task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir runtime task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::OuterAllocaIP"}
{"input": "allocate atomic codegen ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "detach", "output": "mlir/lib/Bindings/Python/IRModule.h::clearOperationsInside"}
{"input": "ast atomic masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir runtime sections", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "single", "output": "clang/include/clang/Basic/SourceManager.h::getOffsetOnly, clang/include/clang/Serialization/ASTReader.h::getSLocEntryID, clang/lib/Basic/SourceManager.cpp::FileID, clang/lib/CodeGen/CGDebugInfo.h::EmitGlobalVariable, clang/lib/Headers/llvm_libc_wrappers/stdlib.h::int, clang/lib/Serialization/ASTReader.cpp::Indices, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_f64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_s8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_f64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_s8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_single_u8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_max.c::test_svmax_u8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_maxnm.c::SVE_ACLE_FUNC, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_f64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_s8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_f64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_s8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_single_u8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u16_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u16_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u32_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u32_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u64_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u64_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u8_x2, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_min.c::test_svmin_u8_x4, clang/test/CodeGen/aarch64-sme2-intrinsics/acle_sme2_minnm.c::SVE_ACLE_FUNC, clang/test/CodeGenCXX/debug-info-static-inline-member.cpp::func, clang/test/CodeGenCXX/debug-info-static-inline-member.cpp::main, flang/include/flang/Lower/ConvertType.h::lookup, flang/include/flang/Lower/ConvertType.h::setCurrentType, flang/include/flang/Optimizer/Builder/HLFIRTools.h::elementalOpMustProduceTemp, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranEntity, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranProcedureValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValueType, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::mayHaveAllocatableComponent, flang/include/flang/Runtime/derived-api.h::RTNAME, flang/lib/Lower/ConvertCall.cpp::pushExprAssociateCleanUp, flang/lib/Lower/ConvertExprToHLFIR.cpp::gen, flang/lib/Lower/ConvertExprToHLFIR.cpp::genDataRefAndSkipParentComponents, flang/lib/Optimizer/HLFIR/IR/HLFIROps.cpp::build, flang/runtime/derived-api.cpp::RTNAME, libc/src/stdio/gpu/file.h::from_stream, libc/src/stdio/scanf_core/file_reader.h::get_char, libc/src/stdio/scanf_core/file_reader.h::has_error, libc/src/stdio/scanf_core/file_reader.h::unget_char, libc/src/stdio/scanf_core/reader.h::file_reader, libc/src/stdio/scanf_core/reader.h::getc, libc/src/stdio/scanf_core/reader.h::has_error, libc/src/stdio/scanf_core/reader.h::string_reader, libc/src/stdio/scanf_core/string_reader.h::get_char, libc/src/stdio/scanf_core/string_reader.h::unget_char, libc/src/stdio/scanf_core/vfscanf_internal.cpp::file_reader, libc/src/stdio/scanf_core/vfscanf_internal.cpp::reader, libc/src/stdio/scanf_core/vfscanf_internal.h::ferror_unlocked, libc/src/stdio/scanf_core/vfscanf_internal.h::getc, libc/src/stdio/scanf_core/vfscanf_internal.h::reader, libc/src/stdio/scanf_core/vfscanf_internal.h::ungetc, libc/src/stdio/sscanf.cpp::reader, libc/src/stdio/sscanf.cpp::string_reader, libc/test/src/stdio/scanf_core/reader_test.cpp::reader, libc/test/src/stdio/scanf_core/reader_test.cpp::str_reader, lld/ELF/Writer.h::canHaveMemtagGlobals, lldb/include/lldb/Breakpoint/StoppointSite.h::GetHardwareIndex, lldb/include/lldb/Breakpoint/StoppointSite.h::SetHardwareIndex, lldb/include/lldb/Target/RegisterFlags.h::m_name, lldb/source/API/SBWatchpoint.cpp::watchpoint_sp, lldb/source/Breakpoint/StoppointSite.cpp::m_id, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::ShouldIgnoreArtificialField, lldb/source/Plugins/TypeSystem/Clang/TypeSystemClang.h::ShouldIgnoreArtificialField, lldb/unittests/Target/RegisterFlagsTest.cpp::make_field, lldb/unittests/Target/RegisterFlagsTest.cpp::single_bit, llvm/include/llvm/ADT/STLExtras.h::begin, llvm/include/llvm/ADT/STLExtras.h::end, llvm/include/llvm/MC/MCInstrAnalysis.h::resetState, llvm/include/llvm/MC/MCInstrAnalysis.h::updateState, llvm/include/llvm/TextAPI/TextAPIWriter.h::parseFileType, llvm/include/llvm/Transforms/IPO/Attributor.h::begin, llvm/include/llvm/Transforms/IPO/Attributor.h::classof, llvm/include/llvm/Transforms/IPO/Attributor.h::end, llvm/include/llvm/Transforms/IPO/Attributor.h::getAllocatedSize, llvm/include/llvm/Transforms/IPO/Attributor.h::getName, llvm/include/llvm/Transforms/IPO/Attributor.h::isValidIRPositionForInit, llvm/include/llvm/Transforms/IPO/Attributor.h::numOffsetBins, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderA, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderB, llvm/lib/CodeGen/CFIFixup.cpp::containsPrologue, llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp::DWARFToGSYMFileIndex, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::Lock, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::New, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::ObjCImageInfoFlags, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::Old, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::formatv, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::rawFlags, llvm/lib/Support/YAMLParser.cpp::StringRef, llvm/lib/Support/YAMLParser.cpp::Valid, llvm/lib/Support/YAMLParser.cpp::getDoubleQuotedValue, llvm/lib/Support/YAMLParser.cpp::getPlainValue, llvm/lib/Support/YAMLParser.cpp::getSingleQuotedValue, llvm/lib/Support/YAMLParser.cpp::parseScalarValue, llvm/lib/Support/YAMLParser.cpp::unescapeDoubleQuoted, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/AMDGPU.h::initializeAMDGPUImageIntrinsicOptimizerPass, llvm/lib/Target/AMDGPU/AMDGPU.h::run, llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp::createIGroupLPDAGMutation, llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.h::createIGroupLPDAGMutation, llvm/lib/Target/AMDGPU/AMDGPUImageIntrinsicOptimizer.cpp::optimizeSection, llvm/lib/Target/AMDGPU/GCNSubtarget.h::hasMSAALoadDstSelBug, llvm/lib/Target/AMDGPU/GCNSubtarget.h::hasVGPRSingleUseHintInsts, llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp::dbgs, llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp::setNonKernelFunctionInitialState, llvm/lib/Target/AMDGPU/SIInsertWaitcnts.cpp::updateWaitcntIfSoft, llvm/lib/Target/AMDGPU/SIInstrInfo.h::getNonSoftWaitcntOpcode, llvm/lib/Target/AMDGPU/SIInstrInfo.h::isSoftWaitcnt, llvm/lib/Target/AMDGPU/SIInstrInfo.h::isWaitcnt, llvm/lib/Target/AMDGPU/SIInstrInfo.h::isWaitcntVsCnt, llvm/lib/Target/RISCV/RISCV.h::initializeRISCVPostRAExpandPseudoPass, llvm/lib/Target/RISCV/RISCVISelLowering.cpp::SDValue, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::RISCVPostRAExpandPseudo, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::expandMBB, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::expandMovImm, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::getPassName, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::runOnMachineFunction, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAAllocationInfo, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAAllocationInfoImpl, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AllocaInst, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::begin, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::changeAllocationSize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::end, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAllocatedSize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAsStr, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::indicatePessimisticFixpoint, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::initialize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::manifest, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::numOffsetBins, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::trackStatistics, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::updateImpl, llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp::ExtractMask, llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp::SavedVL, llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp::ShufflesRes, llvm/tools/llvm-rc/ResourceScriptParser.cpp::read, llvm/tools/llvm-rc/ResourceScriptToken.cpp::Data, llvm/tools/llvm-rc/ResourceScriptToken.cpp::RCToken, llvm/tools/llvm-rc/ResourceScriptToken.cpp::Tokenizer, llvm/tools/llvm-rc/ResourceScriptToken.cpp::getStringError, llvm/tools/llvm-rc/ResourceScriptToken.cpp::tokenizeRC, llvm/tools/llvm-rc/ResourceScriptToken.h::tokenizeRC, llvm/tools/llvm-rc/llvm-rc.cpp::Saver, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::ExitOnErr, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleCompareAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleMergeAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleWriteAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::reportError, llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp::OutStrm, llvm/unittests/Support/YAMLParserTest.cpp::Stream, llvm/unittests/Support/YAMLParserTest.cpp::expectCanParseScalar, mlir/include/mlir/Conversion/LLVMCommon/TypeConverter.h::convertVectorType, mlir/include/mlir/Dialect/Affine/Analysis/LoopAnalysis.h::getConstantTripCount, mlir/include/mlir/Dialect/Affine/Analysis/LoopAnalysis.h::replaceIterArgsAndYieldResults, mlir/include/mlir/Dialect/Affine/IR/AffineOps.h::getConstantTripCount, mlir/include/mlir/Dialect/Affine/IR/AffineOps.h::replaceIterArgsAndYieldResults, mlir/include/mlir/Dialect/Affine/LoopUtils.h::promoteIfSingleIteration, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::getBlockSize, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::isBlockSparsity, mlir/include/mlir/Dialect/Transform/IR/TransformInterfaces.h::getEnforceSingleToplevelTransformOp, mlir/include/mlir/ExecutionEngine/SparseTensorRuntime.h::getSparseTensorReaderIsSymmetric, mlir/include/mlir/ExecutionEngine/SparseTensorRuntime.h::getSparseTensorReaderRank, mlir/include/mlir/IR/Block.h::hasTerminator, mlir/include/mlir/IR/OpDefinition.h::insert, mlir/include/mlir/IR/OpDefinition.h::push_back, mlir/include/mlir/IR/RegionKindInterface.h::mayBeGraphRegion, mlir/include/mlir/IR/Value.h::assign, mlir/lib/Conversion/LLVMCommon/TypeConverter.cpp::failure, mlir/lib/Dialect/Affine/Analysis/LoopAnalysis.cpp::lbSplatValueMap, mlir/lib/Dialect/Affine/Analysis/LoopAnalysis.cpp::ubValueMap, mlir/lib/Dialect/Affine/Analysis/Utils.cpp::node, mlir/lib/Dialect/Affine/IR/AffineOps.cpp::lbSplatValueMap, mlir/lib/Dialect/Affine/IR/AffineOps.cpp::ubValueMap, mlir/lib/Dialect/Affine/Transforms/AffineDataCopyGeneration.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopFusionUtils.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::builder, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::failure, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::promoteIfSingleIteration, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::replaceIterArgsAndYieldResults, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::success, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::topBuilder, mlir/lib/Dialect/Affine/Utils/Utils.cpp::rewriter, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::emitOpError, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/SCF/IR/SCF.cpp::getInductionVar, mlir/lib/Dialect/SparseTensor/IR/Detail/DimLvlMap.cpp::AffineMap, mlir/lib/Dialect/SparseTensor/IR/SparseTensorDialect.cpp::emitError, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::allocaBuffer, mlir/lib/Dialect/Vector/Transforms/LowerVectorContract.cpp::failure, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderDimSize, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderIsSymmetric, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::getSparseTensorReaderRank, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::readSparseTensorShape, mlir/lib/ExecutionEngine/SparseTensorRuntime.cpp::reader, mlir/lib/IR/OperationSupport.cpp::MutableOperandRange, mlir/test/lib/Dialect/Affine/TestAffineDataCopy.cpp::rewriter, mlir/test/lib/Dialect/Test/TestDialect.cpp::MutableOperandRange, mlir/test/lib/Dialect/Test/TestDialect.cpp::getInitMutable, mlir/test/lib/Dialect/Test/TestPatterns.cpp::notifyOperationRemoved"}
{"input": "ast atomic codegen flush masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast distribute for ir masked sema", "output": "mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "ir masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp::BitCastInst"}
{"input": "allocate atomic flush masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic runtime sema", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "codegen flush ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parallel runtime sema target", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "codegen flush for ir masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast declare for ir parse", "output": "mlir/lib/Dialect/Transform/IR/TransformOps.cpp::applySequenceBlock, mlir/lib/Dialect/Transform/IR/TransformOps.cpp::emitDefiniteFailure, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::initialize, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::runOnOperation, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::signalPassFailure, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::success, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::failure, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::initialize, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::runOnOperation, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::signalPassFailure, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterPassBase.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterPassBase.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::failure"}
{"input": "allocate ast atomic codegen flush masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate flush for ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast codegen for masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir parallel sema task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir runtime sema", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic flush for ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "requires", "output": "bolt/lib/Target/RISCV/RISCVMCPlusBuilder.cpp::getCalleeSavedRegs, clang-tools-extra/clang-tidy/misc/CoroutineHostileRAIICheck.cpp::ClangTidyCheck, clang-tools-extra/clang-tidy/misc/CoroutineHostileRAIICheck.h::getCheckTraversalKind, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.cpp::ClangTidyCheck, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.h::check, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.h::checkVarDecl, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.h::isLanguageVersionSupported, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.h::registerMatchers, clang-tools-extra/clang-tidy/misc/CoroutineSuspensionHostileCheck.h::storeOptions, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-hostile-raii.cpp::BasicNoWarning, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-hostile-raii.cpp::BasicWarning, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-hostile-raii.cpp::scopedLockableBasic, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::await_ready, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::await_resume, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::await_suspend, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::bool, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::denyListTest, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::destroy, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::done, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::final_suspend, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::from_address, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::from_promise, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::get_return_object, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::initial_suspend, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::operator, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::resume, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::scopedLockableTest, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::unhandled_exception, clang-tools-extra/test/clang-tidy/checkers/misc/coroutine-suspension-hostile.cpp::yield_value, clang/include/clang/AST/Type.h::alignas, clang/include/clang/Basic/LangOptions.h::hasAtExit, clang/lib/Analysis/ThreadSafety.cpp::LocksetBuilder, clang/lib/Analysis/ThreadSafety.cpp::VisitReturnStmt, clang/lib/CodeGen/CGOpenMPRuntime.cpp::CtorCGF, clang/lib/CodeGen/CGOpenMPRuntime.cpp::DtorCGF, clang/lib/Driver/ToolChains/CommonArgs.cpp::LibCDecls, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::GUARDED_BY, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::PT_GUARDED_BY, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::lock, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_ref_releases_lock_before_return, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_aquires_lock, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_locked, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_locks_required, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_not_locked, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_releases_lock_after_return, clang/test/SemaCXX/warn-thread-safety-analysis.cpp::returns_value_releases_lock_before_return, compiler-rt/lib/scudo/standalone/tsd.h::commitBack, flang/lib/Semantics/resolve-labels.cpp::Post, flang/lib/Semantics/resolve-labels.cpp::PushConstructName, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::initialValue, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::memberOffset, llvm/include/llvm/CodeGen/LiveIntervals.h::hasInterval, llvm/include/llvm/CodeGen/LowLevelType.h::isFixedVector, llvm/include/llvm/CodeGen/LowLevelType.h::isScalableVector, llvm/lib/CodeGen/PHIElimination.cpp::ToUpdate, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::PromoteIntRes_XRINT, llvm/lib/Target/AArch64/AArch64LowerHomogeneousPrologEpilog.cpp::Scale, llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp::IRB, llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp::addKernelMetadata, llvm/lib/Target/NVPTX/NVPTXCtorDtorLowering.cpp::createInitOrFiniCalls, llvm/lib/Target/RISCV/RISCVFrameLowering.cpp::SortingObjects, llvm/lib/Target/RISCV/RISCVFrameLowering.cpp::isCompressibleLdOrSt, llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp::setVLMul, mlir/include/mlir/Dialect/Bufferization/Pipelines/Passes.h::registerBufferizationPipelines, mlir/include/mlir/Dialect/Bufferization/Transforms/Passes.h::createOwnershipBasedBufferDeallocationPass, mlir/include/mlir/Dialect/Transform/IR/TransformDialect.h::getPreloadedTransformModule, mlir/include/mlir/Dialect/Transform/Transforms/TransformInterpreterUtils.h::getPreloadedTransformModule, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWarpgroupMma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmma, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::generateWgmmaGroup, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::isMbarrierShared, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::memRefDescriptor, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::warpgroupGemm, mlir/lib/Conversion/VectorToArmSME/VectorToArmSME.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::success, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::OwnershipBasedBufferDeallocationPass, mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp::rewriteInIm2Col, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::img2colIterators, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::success, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::emitOpError, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::failure, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::isAllowedSizeM, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::success, mlir/lib/Dialect/NVGPU/TransformOps/NVGPUTransformOps.cpp::buildTryWaitParity, mlir/lib/Dialect/Transform/IR/TransformDialect.cpp::ModuleOp, mlir/lib/Dialect/Transform/IR/Utils.cpp::InFlightDiagnostic, mlir/lib/Dialect/Transform/IR/Utils.cpp::canMergeInto, mlir/lib/Dialect/Transform/IR/Utils.cpp::otherSymbolTable, mlir/lib/Dialect/Transform/IR/Utils.cpp::targetSymbolTable, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::ModuleOp, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::canMergeInto, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::failure, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::otherSymbolTable, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::rewriter, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::targetSymbolTable, mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure, mlir/lib/ExecutionEngine/ArmSMEStub.cpp::__arm_sme_state, mlir/lib/ExecutionEngine/ArmSMEStub.cpp::__arm_tpidr2_restore, mlir/lib/ExecutionEngine/ArmSMEStub.cpp::__arm_tpidr2_save, mlir/lib/ExecutionEngine/ArmSMEStub.cpp::__arm_za_disable, mlir/tools/mlir-tblgen/OpDocGen.cpp::resolveAttrDescription, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AMDGPUKernel, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::CUDAKernel, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionAddr, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionPtrs, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/test/libc/assert.c::main, openmp/libomptarget/test/libc/fwrite.c::main, openmp/libomptarget/test/libc/global_ctor_dtor.cpp::main, openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "ast atomic codegen for ir masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for single", "output": "clang/include/clang/Basic/SourceManager.h::getOffsetOnly, clang/include/clang/Serialization/ASTReader.h::getSLocEntryID, clang/lib/Basic/SourceManager.cpp::FileID, clang/lib/CodeGen/CGDebugInfo.h::EmitGlobalVariable, clang/lib/Serialization/ASTReader.cpp::Indices, clang/test/CodeGenCXX/debug-info-static-inline-member.cpp::func, clang/test/CodeGenCXX/debug-info-static-inline-member.cpp::main, flang/include/flang/Lower/ConvertType.h::lookup, flang/include/flang/Lower/ConvertType.h::setCurrentType, flang/include/flang/Optimizer/Builder/HLFIRTools.h::elementalOpMustProduceTemp, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranEntity, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranProcedureValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValueType, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::mayHaveAllocatableComponent, flang/include/flang/Runtime/derived-api.h::RTNAME, flang/lib/Lower/ConvertCall.cpp::pushExprAssociateCleanUp, flang/lib/Lower/ConvertExprToHLFIR.cpp::gen, flang/lib/Lower/ConvertExprToHLFIR.cpp::genDataRefAndSkipParentComponents, flang/lib/Optimizer/HLFIR/IR/HLFIROps.cpp::build, flang/runtime/derived-api.cpp::RTNAME, libc/src/stdio/gpu/file.h::from_stream, lld/ELF/Writer.h::canHaveMemtagGlobals, lldb/include/lldb/Breakpoint/StoppointSite.h::GetHardwareIndex, lldb/include/lldb/Breakpoint/StoppointSite.h::SetHardwareIndex, lldb/include/lldb/Target/RegisterFlags.h::m_name, lldb/source/API/SBWatchpoint.cpp::watchpoint_sp, lldb/source/Breakpoint/StoppointSite.cpp::m_id, lldb/unittests/Target/RegisterFlagsTest.cpp::make_field, lldb/unittests/Target/RegisterFlagsTest.cpp::single_bit, llvm/include/llvm/ADT/STLExtras.h::begin, llvm/include/llvm/ADT/STLExtras.h::end, llvm/include/llvm/MC/MCInstrAnalysis.h::resetState, llvm/include/llvm/MC/MCInstrAnalysis.h::updateState, llvm/include/llvm/TextAPI/TextAPIWriter.h::parseFileType, llvm/include/llvm/Transforms/IPO/Attributor.h::begin, llvm/include/llvm/Transforms/IPO/Attributor.h::classof, llvm/include/llvm/Transforms/IPO/Attributor.h::end, llvm/include/llvm/Transforms/IPO/Attributor.h::getAllocatedSize, llvm/include/llvm/Transforms/IPO/Attributor.h::getName, llvm/include/llvm/Transforms/IPO/Attributor.h::isValidIRPositionForInit, llvm/include/llvm/Transforms/IPO/Attributor.h::numOffsetBins, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderA, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderB, llvm/lib/CodeGen/CFIFixup.cpp::containsPrologue, llvm/lib/DebugInfo/GSYM/DwarfTransformer.cpp::DWARFToGSYMFileIndex, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::Lock, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::New, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::ObjCImageInfoFlags, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::Old, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::formatv, llvm/lib/ExecutionEngine/Orc/MachOPlatform.cpp::rawFlags, llvm/lib/Support/YAMLParser.cpp::StringRef, llvm/lib/Support/YAMLParser.cpp::Valid, llvm/lib/Support/YAMLParser.cpp::getDoubleQuotedValue, llvm/lib/Support/YAMLParser.cpp::getPlainValue, llvm/lib/Support/YAMLParser.cpp::getSingleQuotedValue, llvm/lib/Support/YAMLParser.cpp::parseScalarValue, llvm/lib/Support/YAMLParser.cpp::unescapeDoubleQuoted, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/AMDGPU.h::initializeAMDGPUImageIntrinsicOptimizerPass, llvm/lib/Target/AMDGPU/AMDGPU.h::run, llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.cpp::createIGroupLPDAGMutation, llvm/lib/Target/AMDGPU/AMDGPUIGroupLP.h::createIGroupLPDAGMutation, llvm/lib/Target/AMDGPU/AMDGPUImageIntrinsicOptimizer.cpp::optimizeSection, llvm/lib/Target/AMDGPU/GCNSubtarget.h::hasMSAALoadDstSelBug, llvm/lib/Target/RISCV/RISCV.h::initializeRISCVPostRAExpandPseudoPass, llvm/lib/Target/RISCV/RISCVISelLowering.cpp::SDValue, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::RISCVPostRAExpandPseudo, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::expandMBB, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::expandMovImm, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::getPassName, llvm/lib/Target/RISCV/RISCVPostRAExpandPseudoInsts.cpp::runOnMachineFunction, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAAllocationInfo, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAAllocationInfoImpl, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AllocaInst, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::begin, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::changeAllocationSize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::end, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAllocatedSize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAsStr, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::indicatePessimisticFixpoint, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::initialize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::manifest, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::numOffsetBins, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::trackStatistics, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::updateImpl, llvm/tools/llvm-rc/ResourceScriptParser.cpp::read, llvm/tools/llvm-rc/ResourceScriptToken.cpp::Data, llvm/tools/llvm-rc/ResourceScriptToken.cpp::RCToken, llvm/tools/llvm-rc/ResourceScriptToken.cpp::Tokenizer, llvm/tools/llvm-rc/ResourceScriptToken.cpp::getStringError, llvm/tools/llvm-rc/ResourceScriptToken.cpp::tokenizeRC, llvm/tools/llvm-rc/ResourceScriptToken.h::tokenizeRC, llvm/tools/llvm-rc/llvm-rc.cpp::Saver, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::ExitOnErr, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleCompareAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleMergeAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::handleWriteAction, llvm/tools/llvm-readtapi/llvm-readtapi.cpp::reportError, llvm/unittests/DebugInfo/GSYM/GSYMTest.cpp::OutStrm, llvm/unittests/Support/YAMLParserTest.cpp::Stream, llvm/unittests/Support/YAMLParserTest.cpp::expectCanParseScalar, mlir/include/mlir/Conversion/LLVMCommon/TypeConverter.h::convertVectorType, mlir/include/mlir/Dialect/Affine/Analysis/LoopAnalysis.h::getConstantTripCount, mlir/include/mlir/Dialect/Affine/Analysis/LoopAnalysis.h::replaceIterArgsAndYieldResults, mlir/include/mlir/Dialect/Affine/IR/AffineOps.h::getConstantTripCount, mlir/include/mlir/Dialect/Affine/IR/AffineOps.h::replaceIterArgsAndYieldResults, mlir/include/mlir/Dialect/Affine/LoopUtils.h::promoteIfSingleIteration, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::getBlockSize, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensor.h::isBlockSparsity, mlir/include/mlir/Dialect/Transform/IR/TransformInterfaces.h::getEnforceSingleToplevelTransformOp, mlir/include/mlir/IR/Block.h::hasTerminator, mlir/include/mlir/IR/OpDefinition.h::insert, mlir/include/mlir/IR/OpDefinition.h::push_back, mlir/include/mlir/IR/RegionKindInterface.h::mayBeGraphRegion, mlir/include/mlir/IR/Value.h::assign, mlir/lib/Conversion/LLVMCommon/TypeConverter.cpp::failure, mlir/lib/Dialect/Affine/Analysis/LoopAnalysis.cpp::lbSplatValueMap, mlir/lib/Dialect/Affine/Analysis/LoopAnalysis.cpp::ubValueMap, mlir/lib/Dialect/Affine/Analysis/Utils.cpp::node, mlir/lib/Dialect/Affine/IR/AffineOps.cpp::lbSplatValueMap, mlir/lib/Dialect/Affine/IR/AffineOps.cpp::ubValueMap, mlir/lib/Dialect/Affine/Transforms/AffineDataCopyGeneration.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopFusionUtils.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::builder, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::failure, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::promoteIfSingleIteration, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::replaceIterArgsAndYieldResults, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::rewriter, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::success, mlir/lib/Dialect/Affine/Utils/LoopUtils.cpp::topBuilder, mlir/lib/Dialect/Affine/Utils/Utils.cpp::rewriter, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::emitOpError, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/SCF/IR/SCF.cpp::getInductionVar, mlir/lib/Dialect/SparseTensor/IR/Detail/DimLvlMap.cpp::AffineMap, mlir/lib/Dialect/SparseTensor/IR/SparseTensorDialect.cpp::emitError, mlir/lib/Dialect/Vector/Transforms/LowerVectorContract.cpp::failure, mlir/lib/IR/OperationSupport.cpp::MutableOperandRange, mlir/test/lib/Dialect/Affine/TestAffineDataCopy.cpp::rewriter, mlir/test/lib/Dialect/Test/TestDialect.cpp::MutableOperandRange, mlir/test/lib/Dialect/Test/TestDialect.cpp::getInitMutable, mlir/test/lib/Dialect/Test/TestPatterns.cpp::notifyOperationRemoved"}
{"input": "ast for ir ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir runtime single", "output": "flang/include/flang/Optimizer/Builder/HLFIRTools.h::elementalOpMustProduceTemp, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranEntity, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranProcedureValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValue, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::isFortranValueType, flang/include/flang/Optimizer/HLFIR/HLFIRDialect.h::mayHaveAllocatableComponent, flang/include/flang/Runtime/derived-api.h::RTNAME, flang/lib/Lower/ConvertCall.cpp::pushExprAssociateCleanUp, flang/lib/Optimizer/HLFIR/IR/HLFIROps.cpp::build, flang/runtime/derived-api.cpp::RTNAME, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderA, llvm/lib/Analysis/LoopAccessAnalysis.cpp::BuilderB, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic for ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp::decodeLiteralConstant, llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.cpp::decodeNonVGPRSrcOp, llvm/lib/Target/AMDGPU/Disassembler/AMDGPUDisassembler.h::decodeLiteralConstant, llvm/lib/Target/AMDGPU/MCTargetDesc/AMDGPUInstPrinter.cpp::formatHex, llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.cpp::isValid32BitLiteral, llvm/lib/Target/AMDGPU/Utils/AMDGPUBaseInfo.h::isValid32BitLiteral"}
{"input": "atomic flush for ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::allocaBuffer, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::dimToLvl, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::lvlSizes, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::lvlToDim"}
{"input": "ast codegen for ir ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir parse parser", "output": "clang/include/clang/Parse/Parser.h::ParseOpenACCDirective, clang/include/clang/Parse/Parser.h::ParseOpenACCDirectiveStmt, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirective, clang/lib/Parse/ParseOpenACC.cpp::StmtEmpty, clang/lib/Parse/ParseStmt.cpp::ParseOpenACCDirectiveStmt, clang/lib/Parse/Parser.cpp::ParseOpenACCDirective, clang/test/ParserOpenACC/unimplemented.c::func, clang/test/ParserOpenACC/unimplemented.cpp::func, lldb/source/Plugins/SymbolFile/DWARF/DIERef.h::format, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::initialValue, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::memberOffset, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetCPlusPlusQualifiedName, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetModuleForType, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetOwningClangModule, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::LinkDeclContextToDIE, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::LinkDeclToDIE, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::ParsedDWARFTypeAttributes, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetUnitType, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::IsSkeletonUnit, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::FindDefinitionTypeForDWARFDeclContext, lldb/source/Plugins/SymbolFile/DWARF/UniqueDWARFASTType.h::Insert, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir parallel target", "output": "llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder"}
{"input": "ast flush for ir masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ompirbuilder target teams", "output": "llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel"}
{"input": "codegen flush for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for parallel", "output": "bolt/include/bolt/Core/MCPlusBuilder.h::Lock, clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/include/clang/Parse/Parser.h::ParseOpenACCDirective, clang/include/clang/Parse/Parser.h::ParseOpenACCDirectiveDecl, clang/include/clang/Parse/RAIIObjectsForParser.h::restore, clang/lib/Basic/Targets/NVPTX.h::getGPU, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/CodeGen/Targets/NVPTX.cpp::MaxBlocks, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirective, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirectiveDecl, clang/lib/Parse/ParseOpenACC.cpp::GetOpenACCDirectiveKind, clang/lib/Parse/ParseOpenACC.cpp::ParseOpenACCAtomicDirective, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Parse/Parser.cpp::ParseOpenACCDirective, clang/lib/Parse/Parser.cpp::ParseOpenACCDirectiveDecl, clang/lib/Sema/SemaDeclAttr.cpp::CudaArchToString, clang/lib/Sema/SemaDeclAttr.cpp::TmpAttr, clang/lib/Sema/SemaDeclAttr.cpp::getCudaArch, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, clang/test/ParserOpenACC/parse-constructs.c::func2, clang/test/ParserOpenACC/parse-constructs.c::routine_func, libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h::__simd_walk_1, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::OuterAllocaIP, llvm/lib/Target/NVPTX/NVPTXUtilities.cpp::findOneNVVMAnnotation, llvm/lib/Target/NVPTX/NVPTXUtilities.cpp::getMaxClusterRank, llvm/lib/Target/NVPTX/NVPTXUtilities.h::getMaxClusterRank, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::get, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getMnemonic, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getNextID, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getScope, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getState, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::parse, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::print, mlir/include/mlir/Dialect/Linalg/Transforms/SubsetInsertionOpInterfaceImpl.h::registerSubsetOpInterfaceExternalModels, mlir/include/mlir/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.h::registerSubsetOpInterfaceExternalModels, mlir/include/mlir/Interfaces/SubsetOpInterface.h::defaultGetUpdatedDestination, mlir/include/mlir/Interfaces/SubsetOpInterface.h::verifySubsetExtractionOpInterface, mlir/include/mlir/Interfaces/SubsetOpInterface.h::verifySubsetOpInterface, mlir/include/mlir/Target/LLVMIR/ModuleImport.h::processAccessGroupMetadata, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::createAccessGroupMetadata, mlir/lib/Conversion/AffineToStandard/AffineToStandard.cpp::success, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::getWarpSizeValue, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::success, mlir/lib/Conversion/SCFToControlFlow/SCFToControlFlow.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getImpl, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getScope, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getState, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::mutate, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::decltype, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyAccessGroups, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyLoopAnnotationAttr, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::failure, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::success, mlir/lib/Dialect/Linalg/IR/LinalgInterfaces.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/SubsetInsertionOpInterfaceImpl.cpp::equivalenceFn, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::MemoryFootPrintReducePass, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::findNextPowerOfTwo, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::findPreviousPowerOfTwo, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::getOperands, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::maxFootprint, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::newShape, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::runOnFunction, mlir/lib/Dialect/Linalg/Transforms/Tiling.cpp::runOnOperation, mlir/lib/Dialect/NVGPU/IR/NVGPUDialect.cpp::emitOpError, mlir/lib/Dialect/SCF/TransformOps/SCFTransformOps.cpp::emitSilenceableError, mlir/lib/Dialect/SCF/Transforms/BufferDeallocationOpInterfaceImpl.cpp::builder, mlir/lib/Dialect/SCF/Transforms/BufferDeallocationOpInterfaceImpl.cpp::failure, mlir/lib/Dialect/Tensor/IR/TensorOps.cpp::failure, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::getContainerOperand, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::operateOnDisjointSubsets, mlir/lib/Dialect/Tensor/Transforms/SubsetInsertionOpInterfaceImpl.cpp::operateOnEquivalentSubsets, mlir/lib/Interfaces/SubsetOpInterface.cpp::success, mlir/lib/Interfaces/ValueBoundsOpInterface.cpp::computeConstantBound, mlir/lib/Interfaces/ValueBoundsOpInterface.cpp::failure, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::convertParallelAccesses, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::emitWarning, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::guard, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.h::LoopAnnotationImporter, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.cpp::success, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::createAccessGroupMetadata, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::llvmModule, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::mlirModule, openmp/libomptarget/DeviceRTL/include/Configuration.h::getHardwareParallelism, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::getHardwareParallelism, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::requestedRPCPortCount, openmp/libomptarget/plugins-nextgen/common/PluginInterface/PluginInterface.h::getHardwareParallelism, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::getHardwareParallelism, openmp/libomptarget/test/api/omp_get_num_procs.c::main, openmp/libomptarget/test/api/omp_get_num_procs.c::omp_get_num_procs, pstl/include/pstl/internal/execution_impl.h::decltype"}
{"input": "allocate ast flush ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parallel runtime sema task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate atomic codegen flush for masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parallel runtime target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast codegen for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "barrier codegen ir requires", "output": "mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::isMbarrierShared, mlir/lib/Conversion/NVGPUToNVVM/NVGPUToNVVM.cpp::memRefDescriptor, mlir/lib/Dialect/NVGPU/TransformOps/NVGPUTransformOps.cpp::buildTryWaitParity"}
{"input": "atomic flush ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parse", "output": "clang/include/clang/Parse/Parser.h::ParseOpenACCDirective, clang/include/clang/Parse/Parser.h::ParseOpenACCDirectiveStmt, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirective, clang/lib/Parse/ParseOpenACC.cpp::StmtEmpty, clang/lib/Parse/ParseStmt.cpp::ParseOpenACCDirectiveStmt, clang/lib/Parse/Parser.cpp::ParseOpenACCDirective, clang/test/ParserOpenACC/unimplemented.c::func, clang/test/ParserOpenACC/unimplemented.cpp::func, lldb/include/lldb/Expression/DWARFExpression.h::ContainsThreadLocalStorage, lldb/include/lldb/Expression/DWARFExpression.h::Update_DW_OP_addr, lldb/source/Plugins/SymbolFile/DWARF/DIERef.h::Encode, lldb/source/Plugins/SymbolFile/DWARF/DIERef.h::format, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParser.h::ConstructDemangledNameFromDWARF, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParser.h::GetDIEClassTemplateParams, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParser.h::GetDeclForUIDFromDWARF, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParser.h::GetKind, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::DWARFASTParser, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::attrs, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::m_ast, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetCPlusPlusQualifiedName, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetModuleForType, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::GetOwningClangModule, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::LinkDeclContextToDIE, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::LinkDeclToDIE, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::ParsedDWARFTypeAttributes, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.h::classof, lldb/source/Plugins/SymbolFile/DWARF/DWARFBaseDIE.cpp::DW_TAG_value_to_name, lldb/source/Plugins/SymbolFile/DWARF/DWARFCompileUnit.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/DWARFDIE.h::AppendTypeName, lldb/source/Plugins/SymbolFile/DWARF/DWARFDIE.h::GetDeclContext, lldb/source/Plugins/SymbolFile/DWARF/DWARFDIE.h::GetName, lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugAranges.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugAranges.h::extract, lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugInfo.h::DWARFDebugInfo, lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugInfo.h::dw_offset_t, lldb/source/Plugins/SymbolFile/DWARF/DWARFDebugRanges.h::Extract, lldb/source/Plugins/SymbolFile/DWARF/DWARFDeclContext.h::ConstString, lldb/source/Plugins/SymbolFile/DWARF/DWARFDeclContext.h::GetQualifiedNameAsConstString, lldb/source/Plugins/SymbolFile/DWARF/DWARFFormValue.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/DWARFFormValue.h::ExtractValue, lldb/source/Plugins/SymbolFile/DWARF/DWARFTypeUnit.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetFile, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetLocationData, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetPathStyle, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetRnglistData, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::GetUnitType, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::IsSkeletonUnit, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::SetDwoError, lldb/source/Plugins/SymbolFile/DWARF/DWARFUnit.h::Verify, lldb/source/Plugins/SymbolFile/DWARF/NameToDIE.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/NameToDIE.h::Encode, lldb/source/Plugins/SymbolFile/DWARF/NameToDIE.h::Insert, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::CalculateFrameVariableError, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ClassContainsSelector, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::CompleteType, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ConstructFunctionDemangledName, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::DebuggerInitialize, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::DeclContextMatchesThisSymbolFile, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::Dump, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::DumpClangAST, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::FixupAddress, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetContainingDeclContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDebugInfoIndexTime, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDebugInfoParseTime, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDecl, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDeclContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDeclContextContainingUID, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDeclContextForUID, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetDeclForUID, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetExternalModule, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetFile, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetFunction, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::GetSeparateDebugInfo, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::HasForwardDeclForClangType, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::HasForwardDeclForCompilerType, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::InitializeFirstCodeAddressRecursive, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseBlocksRecursive, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseDebugMacros, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseDeclsForContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseFunctions, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseIsOptimized, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseLanguage, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseLineTable, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseTypes, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseVariablesForContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARF.h::ParseXcodeSDK, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::CalculateFrameVariableError, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::CompleteType, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::DumpClangAST, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::FindDefinitionTypeForDWARFDeclContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::GetDebugInfoModules, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::GetDeclContextContainingUID, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::GetDeclContextForUID, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::GetFileSpecForSO, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::GetSeparateDebugInfo, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::LinkOSOAddress, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseBlocksRecursive, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseDebugMacros, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseDeclsForContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseFunctions, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseIsOptimized, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseLanguage, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseLineTable, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseTypes, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseVariablesForContext, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDebugMap.h::ParseXcodeSDK, lldb/source/Plugins/SymbolFile/DWARF/SymbolFileDWARFDwo.cpp::GetBaseSymbolFile, lldb/source/Plugins/SymbolFile/DWARF/UniqueDWARFASTType.h::Insert, lldb/test/API/lang/cpp/const_static_integral_member/main.cpp::bar, lldb/test/API/lang/cpp/const_static_integral_member/main.cpp::func, lldb/test/API/lang/cpp/union-static-data-members/main.cpp::main, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensorType.h::is2OutOf4Lvl, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensorType.h::isLooseCompressedDLT, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensorType.h::isLooseCompressedLvl, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensorType.h::isWithCrd, mlir/include/mlir/Dialect/SparseTensor/IR/SparseTensorType.h::isWithPos, mlir/include/mlir/ExecutionEngine/SparseTensor/Storage.h::lvlCoords, mlir/include/mlir/ExecutionEngine/SparseTensor/Storage.h::toCOO, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorCodegen.cpp::genCast, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::createFuncCall, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::success, mlir/lib/Dialect/Transform/IR/TransformOps.cpp::applySequenceBlock, mlir/lib/Dialect/Transform/IR/TransformOps.cpp::emitDefiniteFailure, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::initialize, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::runOnOperation, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::signalPassFailure, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::success, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::failure, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::initialize, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::runOnOperation, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::signalPassFailure, mlir/lib/Dialect/Transform/Transforms/PreloadLibraryPass.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterPassBase.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterPassBase.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::failure"}
{"input": "codegen for ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parallel sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic codegen for ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir parallel sema target task", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast codegen flush for masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "distribute masked requires", "output": "mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "allocate ast atomic for ir ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir runtime sections", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parallel runtime sema", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "flush ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic sema teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ir masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir master requires task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "allocate codegen flush for masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast atomic codegen flush ir ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for master task", "output": "openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "allocate ast codegen flush masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::SDValue, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::isHalvingTruncateOfLegalScalableType, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AArch64/AArch64TargetTransformInfo.cpp::AdjustCost, llvm/lib/Target/RISCV/RISCV.h::initializeRISCVFoldMasksPass, llvm/lib/Target/RISCV/RISCVFoldMasks.cpp::isVMerge, llvm/lib/Target/RISCV/RISCVISelLowering.cpp::SDValue, llvm/lib/Target/RISCV/RISCVISelLowering.cpp::convertFromScalableVector, llvm/lib/Transforms/InstCombine/InstCombineAndOrXor.cpp::BitCastInst, mlir/lib/Conversion/ArmSMEToSCF/ArmSMEToSCF.cpp::success, mlir/lib/Conversion/VectorToArmSME/VectorToArmSME.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::failure, mlir/lib/Dialect/MemRef/Transforms/FoldMemRefAliasOps.cpp::getMemRefOperand, mlir/lib/Dialect/Vector/Transforms/LowerVectorContract.cpp::outerProd, mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure, mlir/lib/Dialect/Vector/Transforms/VectorDropLeadUnitDim.cpp::failure, mlir/lib/Dialect/Vector/Transforms/VectorDropLeadUnitDim.cpp::newDimSizes, mlir/lib/Dialect/Vector/Transforms/VectorDropLeadUnitDim.cpp::success"}
{"input": "allocate ast atomic codegen ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h::addCommonConstraint, clang/include/clang/Analysis/FlowSensitive/DataflowAnalysisContext.h::addInvariant, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/CodeGen/windows-seh-EHa-TryInFinally.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, compiler-rt/lib/scudo/standalone/report.cpp::reportHeaderRace, compiler-rt/lib/scudo/standalone/report.h::reportHeaderRace, flang/lib/Semantics/check-acc-structure.h::Enter, llvm/include/llvm/ProfileData/SampleProf.h::Name, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::cvtSMEMAtomic, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::getPredicate, llvm/lib/Target/AMDGPU/GCNSubtarget.h::hasAtomicCSubNoRtnInsts, llvm/lib/Target/AMDGPU/GCNSubtarget.h::hasAtomicCsubNoRtnInsts, mlir/lib/Conversion/MemRefToLLVM/MemRefToLLVM.cpp::failure, mlir/lib/Conversion/OpenMPToLLVM/OpenMPToLLVM.cpp::failure, mlir/lib/Conversion/OpenMPToLLVM/OpenMPToLLVM.cpp::success, mlir/lib/Dialect/MemRef/Transforms/ExpandOps.cpp::failure, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::failure, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::getElementType, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::success, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyCommon, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyRegionsCommon, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::emitError, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::success, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::verifyRegionsCommon, mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp::getSizeInBytes"}
{"input": "for ir parallel runtime sema target task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate codegen for ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked sema", "output": "mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure"}
{"input": "ast codegen for masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "parallel runtime sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast atomic for ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for runtime sema teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ast codegen masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate sections", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ompirbuilder runtime target teams", "output": "llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel"}
{"input": "codegen for ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel runtime sema task teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "allocate ast atomic for ir parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ir parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir ordered parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ir ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen ir masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for masked parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush masked parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir masked parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush ir masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked ordered runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir masked parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen masked parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parallel runtime sema teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "ir ompirbuilder", "output": "clang/lib/CodeGen/CGOpenMPRuntime.cpp::generateAllInfoForMapper, clang/lib/CodeGen/CGOpenMPRuntime.cpp::getFlagMemberOffset, clang/lib/CodeGen/CGOpenMPRuntime.cpp::getMemberOfFlag, llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::getFlagMemberOffset, llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::getMemberOfFlag, llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::AllocaIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::CodeGenIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::InsertPointTy, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::getFlagMemberOffset, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder"}
{"input": "flush masked ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for ir runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir masked parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen ir masked sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for ordered parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush ir ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir masked runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for ir masked ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ir single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir masked parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ir parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush masked ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir parallel sema target teams", "output": "clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo"}
{"input": "atomic codegen for masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush masked parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ir parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for frontend ir", "output": "clang/include/clang/Basic/LangOptions.h::hasAtExit, clang/lib/CodeGen/CGOpenMPRuntime.cpp::CtorCGF, clang/lib/CodeGen/CGOpenMPRuntime.cpp::DtorCGF, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AMDGPUKernel, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::CUDAKernel, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionAddr, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionPtrs, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/test/libc/global_ctor_dtor.cpp::main"}
{"input": "atomic ir parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic parse runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for simd", "output": "libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h::__simd_walk, libcxx/include/__algorithm/pstl_backends/cpu_backends/for_each.h::__simd_walk_1, libcxx/include/experimental/__simd/simd.h::simd, libcxx/include/experimental/__simd/simd_mask.h::simd_mask, libcxx/test/std/experimental/simd/simd.class/simd_ctor_default.pass.cpp::main, libcxx/test/std/experimental/simd/simd.class/simd_ctor_default.pass.cpp::operator, libcxx/test/std/experimental/simd/simd.mask.class/simd_mask_ctor_default.pass.cpp::main, libcxx/test/std/experimental/simd/simd.mask.class/simd_mask_ctor_default.pass.cpp::operator"}
{"input": "codegen flush ir masked ordered parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush masked parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush ir masked ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for frontend", "output": "mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::failure, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::getElementType, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::success, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyCommon, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyRegionsCommon, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::emitError, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::success, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::verifyRegionsCommon"}
{"input": "allocate atomic codegen flush for masked parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir ordered single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked ordered parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for sema", "output": "bolt/include/bolt/Core/BinaryFunction.h::shouldPreserveNops, bolt/lib/Core/BinaryEmitter.cpp::VecOS, clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/include/clang/Basic/Module.h::isNamedModuleInterfaceHasNoInit, clang/include/clang/Parse/Parser.h::ParseArrayBoundExpression, clang/include/clang/Parse/Parser.h::ParseOpenACCDirective, clang/include/clang/Parse/Parser.h::ParseOpenACCDirectiveDecl, clang/include/clang/Parse/RAIIObjectsForParser.h::restore, clang/include/clang/Sema/Sema.h::currentEvaluationContext, clang/include/clang/Sema/Sema.h::isAlwaysConstantEvaluatedContext, clang/include/clang/Sema/Sema.h::isConstantEvaluated, clang/include/clang/Sema/Sema.h::isUnevaluatedContext, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirective, clang/lib/Parse/ParseDeclCXX.cpp::ParseOpenACCDirectiveDecl, clang/lib/Parse/ParseExpr.cpp::ParseConstantExpressionInExprEvalContext, clang/lib/Parse/ParseOpenACC.cpp::GetOpenACCDirectiveKind, clang/lib/Parse/ParseOpenACC.cpp::ParseOpenACCAtomicDirective, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Parse/Parser.cpp::ParseOpenACCDirective, clang/lib/Parse/Parser.cpp::ParseOpenACCDirectiveDecl, clang/lib/Sema/SemaChecking.cpp::isKernelCompatible, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, clang/test/ParserOpenACC/parse-constructs.c::func2, clang/test/ParserOpenACC/parse-constructs.c::routine_func, clang/test/Sema/PR69717.cpp::multi, clang/test/Sema/PR69717.cpp::multi_i, clang/test/Sema/warn-format-overflow-truncation.c::call_snprintf, clang/test/SemaCXX/bitfield-width.c::fee, clang/test/SemaCXX/bitfield-width.c::foo1, clang/test/SemaCXX/bitfield-width.c::foo2, clang/test/SemaCXX/bitfield-width.c::foo3, clang/test/SemaCXX/bitfield-width.c::foo5, clang/test/SemaCXX/bitfield-width.c::foo6, clang/test/SemaCXX/bitfield-width.c::foo7, clang/test/SemaCXX/bitfield-width.c::foo8, clang/test/SemaCXX/cxx2a-consteval.cpp::immediate, clang/test/SemaCXX/cxx2a-consteval.cpp::undefined, clang/test/SemaCXX/cxx2b-deducing-this.cpp::nonmember, clang/test/SemaCXX/cxx2b-deducing-this.cpp::test, clang/test/SemaCXX/lambda-expressions.cpp::GH67492, clang/test/SemaCXX/lambda-invalid-capture.cpp::pr72198, clang/unittests/Analysis/FlowSensitive/TransferTest.cpp::begin, clang/unittests/Analysis/FlowSensitive/TransferTest.cpp::end, clang/unittests/Analysis/FlowSensitive/TransferTest.cpp::target, flang/include/flang/Evaluate/call.h::GetType, flang/include/flang/Evaluate/call.h::isPassedObject, flang/include/flang/Evaluate/call.h::isPercentRef, flang/include/flang/Evaluate/call.h::isPercentVal, flang/include/flang/Evaluate/traverse.h::Combine, flang/include/flang/Evaluate/traverse.h::CombineContents, flang/include/flang/Evaluate/traverse.h::operator, flang/include/flang/Evaluate/type.h::DerivedTypeSpecAsFortran, flang/include/flang/Evaluate/type.h::DropNonConstantCharacterLength, flang/include/flang/Evaluate/type.h::DropNonConstantParameters, flang/include/flang/Evaluate/type.h::IsLengthlessIntrinsicType, flang/include/flang/Semantics/tools.h::IsValue, flang/lib/Evaluate/characteristics.cpp::FromActual, flang/lib/Evaluate/formatting.cpp::DerivedTypeSpecAsFortran, flang/lib/Evaluate/type.cpp::DynamicType, flang/lib/Lower/ConvertExprToHLFIR.cpp::gen, flang/lib/Semantics/check-acc-structure.h::Enter, flang/lib/Semantics/check-acc-structure.h::Leave, flang/lib/Semantics/check-omp-structure.h::CheckTargetData, flang/lib/Semantics/check-omp-structure.h::CheckTargetUpdate, flang/lib/Semantics/check-omp-structure.h::Enter, flang/lib/Semantics/check-omp-structure.h::Leave, flang/lib/Semantics/expression.cpp::AnalyzeVariable, flang/lib/Semantics/expression.cpp::ConvertToType, flang/lib/Semantics/mod-file.cpp::CollectSymbols, flang/lib/Semantics/mod-file.cpp::DEREF, flang/lib/Semantics/mod-file.h::PrepareRenamings, flang/lib/Semantics/resolve-directives.cpp::CheckAssociatedLoopIndex, flang/lib/Semantics/resolve-directives.cpp::DeclareOrMarkOtherAccessEntity, flang/lib/Semantics/resolve-directives.cpp::DeclarePrivateAccessEntity, flang/lib/Semantics/resolve-directives.cpp::Pre, flang/lib/Semantics/resolve-directives.cpp::PrivatizeAssociatedLoopIndex, lld/ELF/Writer.h::canHaveMemtagGlobals, llvm/include/llvm/IR/DebugInfo.h::findDbgUsers, llvm/include/llvm/IR/DebugInfo.h::findDbgValues, llvm/include/llvm/IR/Instruction.h::getMetadataImpl, llvm/include/llvm/IR/Value.h::getMetadataImpl, llvm/lib/IR/DataLayout.cpp::reportError, llvm/lib/IR/DebugInfo.cpp::findDbgIntrinsics, llvm/lib/IR/Metadata.cpp::getMetadataImpl, llvm/lib/IR/Metadata.cpp::getValueMetadata, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::addMemrefToDeallocate, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::combine, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::dropMemrefToDeallocate, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getCombined, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getIndicator, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getLiveMemrefsIn, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getOwnership, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getUninitialized, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getUnique, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::getUnknown, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::isUninitialized, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::isUnique, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::isUnknown, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::operator, mlir/include/mlir/Dialect/Bufferization/IR/BufferDeallocationOpInterface.h::resetOwnerships, mlir/include/mlir/Dialect/Bufferization/Transforms/BufferUtils.h::operator, mlir/include/mlir/Dialect/Bufferization/Transforms/Transforms.h::eliminateEmptyTensors, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::get, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getMnemonic, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getNextID, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getScope, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::getState, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::parse, mlir/include/mlir/Dialect/LLVMIR/LLVMAttrs.h::print, mlir/include/mlir/Dialect/Linalg/IR/LinalgInterfaces.h::isaCopyOpInterface, mlir/include/mlir/Target/LLVMIR/ModuleImport.h::processAccessGroupMetadata, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::createAccessGroupMetadata, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::getTopologicallySortedBlocks, mlir/include/mlir/Transforms/RegionUtils.h::getTopologicallySortedBlocks, mlir/lib/Conversion/ArithToSPIRV/ArithToSPIRV.cpp::getTypeConversionFailure, mlir/lib/Conversion/ArithToSPIRV/ArithToSPIRV.cpp::shouldInsertNanGuards, mlir/lib/Conversion/ArithToSPIRV/ArithToSPIRV.cpp::success, mlir/lib/Dialect/Arith/IR/ArithOps.cpp::getLhs, mlir/lib/Dialect/Arith/IR/ArithOps.cpp::getRhs, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::buildBoolValue, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::emitError, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::getUnknown, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::indicator, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::isMemref, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::retainedByLiveness, mlir/lib/Dialect/Bufferization/IR/BufferDeallocationOpInterface.cpp::success, mlir/lib/Dialect/Bufferization/TransformOps/BufferizationTransformOps.cpp::state, mlir/lib/Dialect/Bufferization/Transforms/EmptyTensorElimination.cpp::failure, mlir/lib/Dialect/Bufferization/Transforms/EmptyTensorElimination.cpp::rewriter, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::builder, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::clearOwnershipOf, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::combine, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::failure, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::getCombined, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::getIndicator, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::getUninitialized, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::getUnique, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::getUnknown, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::handleInterface, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::isUninitialized, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::isUnique, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::isUnknown, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::joinOwnership, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::liveness, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::retainedByLiveness, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::state, mlir/lib/Dialect/Bufferization/Transforms/OwnershipBasedBufferDeallocation.cpp::success, mlir/lib/Dialect/ControlFlow/Transforms/BufferDeallocationOpInterfaceImpl.cpp::builder, mlir/lib/Dialect/ControlFlow/Transforms/BufferDeallocationOpInterfaceImpl.cpp::failure, mlir/lib/Dialect/ControlFlow/Transforms/BufferDeallocationOpInterfaceImpl.cpp::isMemref, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getImpl, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getScope, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::getState, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::mutate, mlir/lib/Dialect/LLVMIR/IR/LLVMAttrs.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::decltype, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyAccessGroups, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::verifyLoopAnnotationAttr, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::failure, mlir/lib/Dialect/LLVMIR/IR/LLVMInterfaces.cpp::success, mlir/lib/Dialect/Linalg/IR/LinalgInterfaces.cpp::failure, mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp::emitDefaultSilenceableFailure, mlir/lib/Dialect/Linalg/TransformOps/LinalgTransformOps.cpp::rewriteInIm2Col, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::img2colIterators, mlir/lib/Dialect/Linalg/Transforms/ConvertConv2DToImg2Col.cpp::success, mlir/lib/Dialect/Linalg/Transforms/Specialize.cpp::failure, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::failure, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::getElementType, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::success, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyCommon, mlir/lib/Dialect/OpenACC/IR/OpenACC.cpp::verifyRegionsCommon, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::emitError, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::success, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::verifyRegionsCommon, mlir/lib/Dialect/SparseTensor/Transforms/Sparsification.cpp::failure, mlir/lib/Dialect/Tensor/Transforms/BufferizableOpInterfaceImpl.cpp::bufferizesToAllocation, mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp::propagateShapesToTosaIf, mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp::propagateShapesToTosaWhile, mlir/lib/Dialect/Tosa/Transforms/TosaInferShapes.cpp::range, mlir/lib/Dialect/Vector/Transforms/VectorDistribute.cpp::failure, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::convertParallelAccesses, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::emitWarning, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.cpp::guard, mlir/lib/Target/LLVMIR/LoopAnnotationImporter.h::LoopAnnotationImporter, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.cpp::success, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::createAccessGroupMetadata, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::llvmModule, mlir/lib/Target/LLVMIR/LoopAnnotationTranslation.h::mlirModule, mlir/lib/Target/LLVMIR/ModuleTranslation.cpp::traversal, mlir/lib/Transforms/Mem2Reg.cpp::computeBlockingUses, mlir/lib/Transforms/Mem2Reg.cpp::dominanceSort, mlir/lib/Transforms/Utils/RegionUtils.cpp::traversal, openmp/libomptarget/test/offloading/weak.c::main"}
{"input": "atomic flush masked parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen masked ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ir parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "detach for ir", "output": "mlir/lib/Bindings/Python/IRModule.h::clearOperationsInside"}
{"input": "ast atomic ir masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for masked ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen for ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir ordered parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ir masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for masked ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen masked runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for masked parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush masked parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked ordered parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast for ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir masked ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush for ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for masked parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked parse parser runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir masked ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ordered parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered parse sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parse parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ir ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ir masked ordered parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic masked sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen for masked ordered parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen for ir parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush masked runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for masked ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for ir masked ordered parse target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for ir ordered parse parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush for ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir runtime sections", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ordered single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for ir parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ir masked ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for masked ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir masked ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen ir", "output": "clang/lib/CodeGen/CGGPUBuiltin.cpp::IRB, clang/lib/CodeGen/CGGPUBuiltin.cpp::isString, flang/lib/Lower/Bridge.cpp::createDispatchTableOps, flang/lib/Lower/Bridge.cpp::createTypeInfo, flang/lib/Lower/Bridge.cpp::createTypeInfoGlobals, flang/lib/Optimizer/Dialect/FIROps.cpp::emitOpError, llvm/include/llvm/CodeGen/MachineInstr.h::insert, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp::appendArg, llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp::appendVectorArg, llvm/lib/Transforms/Utils/AMDGPUEmitPrintf.cpp::locateCStrings, llvm/unittests/CodeGen/MachineInstrTest.cpp::Mod"}
{"input": "allocate ast atomic flush for parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parse parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic masked ordered runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic for ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for masked ordered parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic flush for masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen ir parse parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for parse runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "masked parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic masked parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush ir ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ir masked ordered", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for ordered runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen ir parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush for masked parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush for masked ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for ordered parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic for runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ir target", "output": "bolt/include/bolt/Core/MCPlusBuilder.h::getLabel, bolt/include/bolt/Core/MCPlusBuilder.h::setLabel, bolt/include/bolt/Core/Relocation.h::isIRelative, bolt/include/bolt/Core/Relocation.h::isInstructionReference, bolt/lib/Target/RISCV/RISCVMCPlusBuilder.cpp::getCalleeSavedRegs, bolt/test/AArch64/ifunc.c::_start, bolt/test/AArch64/ifunc.c::foo, clang-tools-extra/clang-tidy/modernize/UseAutoCheck.cpp::hasAnyName, clang-tools-extra/clang-tidy/modernize/UseAutoCheck.cpp::hasStdContainerName, clang-tools-extra/clang-tidy/modernize/UseAutoCheck.cpp::hasStdIteratorName, clang-tools-extra/clangd/SemanticHighlighting.cpp::TraverseTemplateArgumentLoc, clang-tools-extra/clangd/refactor/tweaks/ExtractFunction.cpp::decrementLoopSwitchCounters, clang-tools-extra/clangd/refactor/tweaks/SwapIfBranches.cpp::hidden, clang-tools-extra/clangd/unittests/DiagnosticsTests.cpp::func, clang-tools-extra/clangd/unittests/DiagnosticsTests.cpp::pthread_kill, clang-tools-extra/clangd/unittests/TweakTests.cpp::foo, clang-tools-extra/test/clang-tidy/checkers/bugprone-bad-signal-to-kill-thread-sigterm-not-a-literal.cpp::func, clang-tools-extra/test/clang-tidy/checkers/bugprone-bad-signal-to-kill-thread-sigterm-not-a-literal.cpp::pthread_kill, clang-tools-extra/test/clang-tidy/checkers/bugprone-bad-signal-to-kill-thread-undef-sigterm.cpp::func, clang-tools-extra/test/clang-tidy/checkers/bugprone-bad-signal-to-kill-thread-undef-sigterm.cpp::pthread_kill, clang-tools-extra/test/clang-tidy/checkers/bugprone-bool-pointer-implicit-conversion.cpp::foo, clang/include/clang/AST/ASTContext.h::shouldExternalizeStaticVar, clang/include/clang/AST/DeclOpenMP.h::CreateClauses, clang/include/clang/AST/DeclOpenMP.h::Decl, clang/include/clang/AST/DeclOpenMP.h::ValueDecl, clang/include/clang/AST/DeclOpenMP.h::clauselist_begin, clang/include/clang/AST/DeclOpenMP.h::clauselist_empty, clang/include/clang/AST/DeclOpenMP.h::clauselist_end, clang/include/clang/AST/DeclOpenMP.h::clauselist_size, clang/include/clang/AST/DeclOpenMP.h::clauses, clang/include/clang/AST/DeclOpenMP.h::getClauses, clang/include/clang/AST/DeclOpenMP.h::getNumClauses, clang/include/clang/AST/DeclOpenMP.h::numTrailingObjects, clang/include/clang/AST/DeclOpenMP.h::setClauses, clang/include/clang/AST/DeclOpenMP.h::setMapperVarRef, clang/include/clang/AST/DeclOpenMP.h::size, clang/include/clang/AST/DeclOpenMP.h::varlist_empty, clang/include/clang/AST/DeclOpenMP.h::varlist_size, clang/include/clang/AST/ExprCXX.h::child_range, clang/include/clang/AST/ExprCXX.h::children, clang/include/clang/AST/ExprCXX.h::const_child_range, clang/include/clang/AST/OpenMPClause.h::NumClauses, clang/include/clang/AST/OpenMPClause.h::OMPNoChildClause, clang/include/clang/AST/OpenMPClause.h::getAssociatedStmt, clang/include/clang/AST/OpenMPClause.h::getAssociatedStmtAsRange, clang/include/clang/AST/OpenMPClause.h::getChildren, clang/include/clang/AST/OpenMPClause.h::getClauses, clang/include/clang/AST/OpenMPClause.h::getNumChildren, clang/include/clang/AST/OpenMPClause.h::getNumClauses, clang/include/clang/AST/OpenMPClause.h::hasAssociatedStmt, clang/include/clang/AST/OpenMPClause.h::numTrailingObjects, clang/include/clang/AST/OpenMPClause.h::setAssociatedStmt, clang/include/clang/AST/OpenMPClause.h::setChildren, clang/include/clang/AST/OpenMPClause.h::setClauses, clang/include/clang/AST/StmtOpenMP.h::OMPAtomicDirective, clang/include/clang/AST/StmtOpenMP.h::OMPCancelDirective, clang/include/clang/AST/StmtOpenMP.h::OMPCriticalDirective, clang/include/clang/AST/StmtOpenMP.h::OMPDepobjDirective, clang/include/clang/AST/StmtOpenMP.h::OMPDistributeDirective, clang/include/clang/AST/StmtOpenMP.h::OMPDistributeParallelForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPDistributeParallelForSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPDistributeSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPExecutableDirective, clang/include/clang/AST/StmtOpenMP.h::OMPFlushDirective, clang/include/clang/AST/StmtOpenMP.h::OMPForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPForSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPMasterTaskLoopDirective, clang/include/clang/AST/StmtOpenMP.h::OMPMasterTaskLoopSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPOrderedDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelForSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelMasterDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelMasterTaskLoopDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelMasterTaskLoopSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPParallelSectionsDirective, clang/include/clang/AST/StmtOpenMP.h::OMPScanDirective, clang/include/clang/AST/StmtOpenMP.h::OMPSectionsDirective, clang/include/clang/AST/StmtOpenMP.h::OMPSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPSingleDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetDataDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetEnterDataDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetExitDataDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetParallelDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetParallelForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetParallelForSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetTeamsDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetTeamsDistributeDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetTeamsDistributeParallelForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetTeamsDistributeSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTargetUpdateDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTaskDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTaskLoopDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTaskLoopSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTaskgroupDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTeamsDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTeamsDistributeDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTeamsDistributeParallelForDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTeamsDistributeParallelForSimdDirective, clang/include/clang/AST/StmtOpenMP.h::OMPTeamsDistributeSimdDirective, clang/include/clang/AST/StmtOpenMP.h::child_range, clang/include/clang/AST/StmtOpenMP.h::clauses, clang/include/clang/AST/StmtOpenMP.h::const_child_range, clang/include/clang/AST/StmtOpenMP.h::getNumClauses, clang/include/clang/AST/StmtOpenMP.h::hasAssociatedStmt, clang/include/clang/AST/StmtOpenMP.h::setAssociatedStmt, clang/include/clang/AST/StmtOpenMP.h::setClauses, clang/include/clang/AST/StmtOpenMP.h::setCond, clang/include/clang/AST/StmtOpenMP.h::setExpr, clang/include/clang/AST/StmtOpenMP.h::setInc, clang/include/clang/AST/StmtOpenMP.h::setInit, clang/include/clang/AST/StmtOpenMP.h::setPreCond, clang/include/clang/AST/StmtOpenMP.h::setReductionRef, clang/include/clang/AST/StmtOpenMP.h::setTaskReductionRefExpr, clang/include/clang/AST/StmtOpenMP.h::setUpdateExpr, clang/include/clang/AST/StmtOpenMP.h::setV, clang/include/clang/AST/StmtOpenMP.h::setX, clang/include/clang/AST/Type.h::getMaxElementsPerDimension, clang/include/clang/AST/Type.h::getNumColumns, clang/include/clang/AST/Type.h::getNumRows, clang/include/clang/AST/Type.h::isDimensionValid, clang/include/clang/Basic/FixedPoint.h::APFixedPoint, clang/include/clang/Basic/FixedPoint.h::negate, clang/include/clang/Basic/FixedPoint.h::shl, clang/include/clang/Basic/FixedPoint.h::shr, clang/include/clang/Basic/LangOptions.h::hasAtExit, clang/include/clang/CodeGen/CGFunctionInfo.h::getIndirectAddrSpace, clang/include/clang/CodeGen/CGFunctionInfo.h::isDirect, clang/include/clang/CodeGen/CGFunctionInfo.h::isIndirectAliased, clang/include/clang/CodeGen/CGFunctionInfo.h::setIndirectAddrSpace, clang/include/clang/Sema/Sema.h::DiagnoseUnexpandedParameterPackInRequiresExpr, clang/include/clang/Sema/Sema.h::isOpenMPDeclareMapperVarDeclAllowed, clang/include/clang/Serialization/ASTRecordReader.h::readOMPChildren, clang/include/clang/Serialization/ASTRecordWriter.h::writeOMPChildren, clang/include/clang/Tooling/Syntax/Nodes.h::NameSpecifier, clang/include/clang/Tooling/Syntax/Nodes.h::classof, clang/include/clang/Tooling/Syntax/Nodes.h::declarators, clang/include/clang/Tooling/Syntax/Nodes.h::delimiters, clang/include/clang/Tooling/Syntax/Nodes.h::parameters, clang/include/clang/Tooling/Syntax/Nodes.h::specifiers, clang/include/clang/Tooling/Syntax/Nodes.h::statements, clang/lib/AST/MicrosoftMangle.cpp::getIsLocalVFTAliasReq, clang/lib/AST/MicrosoftMangle.cpp::setIsLocalVFTAliasReq, clang/lib/AST/StmtOpenMP.cpp::getInnermostCapturedStmt, clang/lib/AST/StmtOpenMP.cpp::getRawStmt, clang/lib/AST/StmtOpenMP.cpp::sizeof, clang/lib/AST/Type.cpp::MatrixType, clang/lib/Analysis/CFG.cpp::VisitChildrenForTemporaryDtors, clang/lib/Basic/FixedPoint.cpp::APFixedPoint, clang/lib/Basic/Targets.cpp::P2TargetInfo, clang/lib/Basic/Targets/P2.h::getGCCAddlRegNames, clang/lib/Basic/Targets/P2.h::getGCCRegAliases, clang/lib/Basic/Targets/P2.h::getGCCRegNames, clang/lib/Basic/Targets/P2.h::getTargetDefines, clang/lib/Basic/Targets/P2.h::validateAsmConstraint, clang/lib/Basic/Targets/PPC.h::supportsTargetAttributeTune, clang/lib/CodeGen/CGOpenMPRuntime.cpp::AllocaIP, clang/lib/CodeGen/CGOpenMPRuntime.cpp::CodeGenIP, clang/lib/CodeGen/CGOpenMPRuntime.cpp::CtorCGF, clang/lib/CodeGen/CGOpenMPRuntime.cpp::DtorCGF, clang/lib/CodeGen/CGOpenMPRuntime.cpp::OmpLoc, clang/lib/CodeGen/CGOpenMPRuntime.h::RequiresDevicePointerInfo, clang/lib/CodeGen/CGOpenMPRuntime.h::TargetDataInfo, clang/lib/CodeGen/CGOpenMPRuntime.h::separateBeginEndCalls, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::getDataSharingMode, clang/lib/CodeGen/CGStmtOpenMP.cpp::CGSI, clang/lib/CodeGen/CGStmtOpenMP.cpp::CapInfoRAII, clang/lib/CodeGen/CGStmtOpenMP.cpp::Scope, clang/lib/CodeGen/TargetInfo.cpp::getNaturalAlignIndirect, clang/lib/Driver/ToolChains/P2.cpp::Generic_ELF, clang/lib/Driver/ToolChains/P2.cpp::getDriver, clang/lib/Driver/ToolChains/P2.h::Tool, clang/lib/Driver/ToolChains/P2.h::computeSysRoot, clang/lib/Driver/ToolChains/P2.h::isPICDefault, clang/lib/Headers/__clang_cuda_math.h::nearbyint, clang/lib/Headers/__clang_cuda_math.h::nearbyintf, clang/lib/Headers/__clang_cuda_math.h::rint, clang/lib/Headers/__clang_cuda_math.h::rintf, clang/lib/Headers/__clang_hip_math.h::__static_assert_equal_size, clang/lib/Headers/__clang_hip_math.h::__suppress_unused_warning, clang/lib/Headers/altivec.h::__builtin_altivec_vextddvlx, clang/lib/Headers/altivec.h::__builtin_altivec_vextddvrx, clang/lib/Headers/altivec.h::__builtin_altivec_vextdubvlx, clang/lib/Headers/altivec.h::__builtin_altivec_vextdubvrx, clang/lib/Headers/altivec.h::__builtin_altivec_vextduhvlx, clang/lib/Headers/altivec.h::__builtin_altivec_vextduhvrx, clang/lib/Headers/altivec.h::__builtin_altivec_vextduwvlx, clang/lib/Headers/altivec.h::__builtin_altivec_vextduwvrx, clang/lib/Headers/altivec.h::vec_sld, clang/lib/Headers/wasm_simd128.h::__attribute__, clang/lib/Parse/ParseOpenMP.cpp::getOpenMPClauseName, clang/lib/Sema/SemaChecking.cpp::OtherPromotedRange, clang/lib/Sema/SemaChecking.cpp::OtherPromotedTypeRange, clang/lib/Sema/SemaChecking.cpp::OtherPromotedValueRange, clang/lib/Sema/SemaDeclAttr.cpp::handleCogmainAttr, clang/lib/Sema/SemaDeclAttr.cpp::handleCogtextAttr, clang/lib/Sema/SemaExpr.cpp::InvalidOperands, clang/lib/Sema/SemaExpr.cpp::getOpenMPDeclareMapperVarName, clang/lib/Sema/SemaExprCXX.cpp::ExprError, clang/lib/Sema/SemaOpenMP.cpp::VisitCXXOperatorCallExpr, clang/lib/Sema/SemaOpenMP.cpp::addDeclareMapperVarRef, clang/lib/Sema/SemaOverload.cpp::ExprError, clang/lib/Sema/SemaTemplateInstantiateDecl.cpp::Locs, clang/lib/Sema/SemaTemplateInstantiateDecl.cpp::ThisScope, clang/lib/Sema/SemaTemplateVariadic.cpp::DiagnoseUnexpandedParameterPacks, clang/lib/Sema/SemaTemplateVariadic.cpp::ExprError, clang/lib/Sema/TreeTransform.h::ExprError, clang/lib/Sema/TreeTransform.h::getDerived, clang/lib/Sema/TreeTransform.h::getSema, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::BSLoc, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::Checker, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::LocalVisitor, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::VisitLambdaExpr, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::shouldVisitImplicitCode, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::shouldVisitTemplateInstantiations, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::visitLambdaExpr, clang/lib/StaticAnalyzer/Checkers/WebKit/UncountedLambdaCapturesChecker.cpp::visitor, clang/lib/Tooling/Syntax/BuildTree.cpp::WalkUpFromDependentScopeDeclRefExpr, clang/lib/Tooling/Syntax/BuildTree.cpp::assignRole, clang/lib/Tooling/Syntax/BuildTree.cpp::foldNode, clang/lib/Tooling/Syntax/BuildTree.cpp::getDeclarationRange, clang/lib/Tooling/Syntax/BuildTree.cpp::getExprRange, clang/lib/Tooling/Syntax/BuildTree.cpp::getLocalSourceRange, clang/lib/Tooling/Syntax/BuildTree.cpp::getRange, clang/lib/Tooling/Syntax/BuildTree.cpp::getStmtRange, clang/lib/Tooling/Syntax/BuildTree.cpp::isImplicitExpr, clang/test/Analysis/Checkers/WebKit/uncounted-lambda-captures.cpp::quiet, clang/test/Analysis/Checkers/WebKit/uncounted-lambda-captures.cpp::raw_ptr, clang/test/Analysis/Checkers/WebKit/uncounted-lambda-captures.cpp::references, clang/test/Analysis/use-after-move.cpp::test, clang/test/CodeGen/atomics-sema-alignment.c::braz, clang/test/CodeGen/builtin-bpf-btf-type-id.c::__builtin_btf_type_id, clang/test/CodeGen/builtin-bpf-btf-type-id.c::test3, clang/test/CodeGen/builtins-bpf-preserve-field-info-3.c::unit1, clang/test/CodeGen/builtins-bpf-preserve-field-info-3.c::unit2, clang/test/CodeGen/builtins-bpf-preserve-field-info-3.c::unit3, clang/test/CodeGen/builtins-bpf-preserve-field-info-4.c::unit1, clang/test/CodeGen/builtins-bpf-preserve-field-info-4.c::unit2, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extracth_uc, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extracth_ui, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extracth_ul, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extracth_us, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extractl_uc, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extractl_ui, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extractl_ul, clang/test/CodeGen/builtins-ppc-p10vector.c::test_vec_extractl_us, clang/test/CodeGen/builtins-ppc-p10vector.c::vec_extracth, clang/test/CodeGen/builtins-ppc-p10vector.c::vec_extractl, clang/test/CodeGen/builtins-wasm.c::__attribute, clang/test/CodeGen/builtins-wasm.c::add_saturate_u_i16x8, clang/test/CodeGen/builtins-wasm.c::add_saturate_u_i8x16, clang/test/CodeGen/builtins-wasm.c::avgr_u_i16x8, clang/test/CodeGen/builtins-wasm.c::avgr_u_i8x16, clang/test/CodeGen/builtins-wasm.c::extract_lane_u_i16x8, clang/test/CodeGen/builtins-wasm.c::extract_lane_u_i8x16, clang/test/CodeGen/builtins-wasm.c::max_u_i16x8, clang/test/CodeGen/builtins-wasm.c::max_u_i32x4, clang/test/CodeGen/builtins-wasm.c::max_u_i8x16, clang/test/CodeGen/builtins-wasm.c::min_u_i16x8, clang/test/CodeGen/builtins-wasm.c::min_u_i32x4, clang/test/CodeGen/builtins-wasm.c::min_u_i8x16, clang/test/CodeGen/builtins-wasm.c::narrow_u_i16x8_i32x4, clang/test/CodeGen/builtins-wasm.c::narrow_u_i8x16_i16x8, clang/test/CodeGen/builtins-wasm.c::sub_saturate_u_i16x8, clang/test/CodeGen/builtins-wasm.c::sub_saturate_u_i8x16, clang/test/CodeGen/ext-int.c::Size1ExtIntParam, clang/test/CodeGen/ext-int.c::_ExtInt, clang/test/CodeGen/windows-seh-EHa-TryInFinally.cpp::bar, clang/test/Headers/wasm.c::main, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::bar, clang/test/OpenMP/nvptx_target_teams_ompx_bare_codegen.cpp::ftemplate, clang/test/OpenMP/ompx_bare_messages.c::bar, clang/test/OpenMP/ompx_bare_messages.c::foo, clang/test/OpenMP/target_data_if_logical_codegen.cpp::foo, clang/test/OpenMP/target_data_if_logical_codegen.cpp::if_logical, clang/test/OpenMP/target_data_if_logical_codegen.cpp::main, clang/test/OpenMP/target_map_codegen.cpp::array_shaping, clang/test/OpenMP/target_map_codegen.cpp::bar, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_globals, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_inside_captured, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_member_pointer_references, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_pointer_references, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_references_and_function_args, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_single, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_struct_fields, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_template_args_and_members, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_with_inner_lambda, clang/test/OpenMP/target_map_codegen.cpp::explicit_maps_with_private_class_members, clang/test/OpenMP/target_map_codegen.cpp::foo, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_array, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_class, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_double, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_double_complex, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_float, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_float_complex, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_host_global, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_integer, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_nested_integer, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_nested_integer_and_enum, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_parameter, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_pointer, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_reference, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_struct, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_template_type_capture, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_templated_class, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_templated_function, clang/test/OpenMP/target_map_codegen.cpp::implicit_maps_variable_length_array, clang/test/OpenMP/target_map_codegen.cpp::map_with_deep_copy, clang/test/OpenMP/target_map_codegen.cpp::modify, clang/test/OpenMP/target_map_codegen.cpp::sss, clang/test/OpenMP/target_map_codegen.cpp::ssst, clang/test/OpenMP/target_map_codegen.cpp::test, clang/test/OpenMP/target_map_codegen.cpp::test_present_members, clang/test/OpenMP/target_map_codegen.cpp::zero_size_section_and_private_maps, clang/test/OpenMP/target_map_codegen_00.cpp::implicit_maps_integer, clang/test/OpenMP/target_map_codegen_00.cpp::modify, clang/test/OpenMP/target_map_codegen_01.cpp::implicit_maps_reference, clang/test/OpenMP/target_map_codegen_02.cpp::implicit_maps_parameter, clang/test/OpenMP/target_map_codegen_03.cpp::implicit_maps_nested_integer, clang/test/OpenMP/target_map_codegen_04.cpp::implicit_maps_nested_integer_and_enum, clang/test/OpenMP/target_map_codegen_05.cpp::implicit_maps_host_global, clang/test/OpenMP/target_map_codegen_06.cpp::implicit_maps_double, clang/test/OpenMP/target_map_codegen_07.cpp::implicit_maps_float, clang/test/OpenMP/target_map_codegen_08.cpp::implicit_maps_array, clang/test/OpenMP/target_map_codegen_09.cpp::implicit_maps_pointer, clang/test/OpenMP/target_map_codegen_10.cpp::implicit_maps_double_complex, clang/test/OpenMP/target_map_codegen_11.cpp::implicit_maps_float_complex, clang/test/OpenMP/target_map_codegen_12.cpp::implicit_maps_variable_length_array, clang/test/OpenMP/target_map_codegen_13.cpp::foo, clang/test/OpenMP/target_map_codegen_13.cpp::implicit_maps_class, clang/test/OpenMP/target_map_codegen_13.cpp::sss, clang/test/OpenMP/target_map_codegen_14.cpp::bar, clang/test/OpenMP/target_map_codegen_14.cpp::foo, clang/test/OpenMP/target_map_codegen_14.cpp::implicit_maps_templated_class, clang/test/OpenMP/target_map_codegen_14.cpp::ssst, clang/test/OpenMP/target_map_codegen_15.cpp::foo, clang/test/OpenMP/target_map_codegen_15.cpp::implicit_maps_templated_function, clang/test/OpenMP/target_map_codegen_16.cpp::implicit_maps_struct, clang/test/OpenMP/target_map_codegen_17.cpp::foo, clang/test/OpenMP/target_map_codegen_17.cpp::implicit_maps_template_type_capture, clang/test/OpenMP/target_map_codegen_18.cpp::explicit_maps_single, clang/test/OpenMP/target_map_codegen_19.cpp::explicit_maps_references_and_function_args, clang/test/OpenMP/target_map_codegen_20.cpp::explicit_maps_template_args_and_members, clang/test/OpenMP/target_map_codegen_20.cpp::foo, clang/test/OpenMP/target_map_codegen_21.cpp::explicit_maps_globals, clang/test/OpenMP/target_map_codegen_22.cpp::explicit_maps_inside_captured, clang/test/OpenMP/target_map_codegen_23.cpp::explicit_maps_struct_fields, clang/test/OpenMP/target_map_codegen_24.cpp::explicit_maps_with_inner_lambda, clang/test/OpenMP/target_map_codegen_24.cpp::foo, clang/test/OpenMP/target_map_codegen_25.cpp::explicit_maps_with_private_class_members, clang/test/OpenMP/target_map_codegen_25.cpp::foo, clang/test/OpenMP/target_map_codegen_26.cpp::zero_size_section_and_private_maps, clang/test/OpenMP/target_map_codegen_27.cpp::explicit_maps_pointer_references, clang/test/OpenMP/target_map_codegen_28.cpp::explicit_maps_member_pointer_references, clang/test/OpenMP/target_map_codegen_28.cpp::foo, clang/test/OpenMP/target_map_codegen_29.cpp::map_with_deep_copy, clang/test/OpenMP/target_map_codegen_30.cpp::explicit_maps_single, clang/test/OpenMP/target_map_codegen_31.cpp::explicit_maps_single, clang/test/OpenMP/target_map_codegen_32.cpp::test, clang/test/OpenMP/target_map_codegen_32.cpp::test_present_members, clang/test/OpenMP/target_map_codegen_33.cpp::array_shaping, clang/test/OpenMP/target_map_messages.cpp::operator, clang/test/Sema/arm-bfloat.cpp::test_vector, clang/test/Sema/attr-target.c::__attribute__, clang/test/Sema/builtins-bpf.c::__builtin_preserve_enum_value, clang/test/Sema/builtins-bpf.c::__builtin_preserve_type_info, clang/test/Sema/builtins-bpf.c::int, clang/test/Sema/builtins-bpf.c::invalid16, clang/test/Sema/builtins-bpf.c::invalid17, clang/test/Sema/builtins-bpf.c::invalid18, clang/test/Sema/builtins-bpf.c::valid12, clang/test/Sema/builtins-bpf.c::valid13, clang/test/Sema/builtins-bpf.c::valid14, clang/test/Sema/builtins-bpf.c::valid15, clang/test/Sema/warn-bad-function-cast.c::ff1, clang/test/SemaTemplate/recovery-tree-transform-crash.cpp::call, clang/test/SemaTemplate/recovery-tree-transform-crash.cpp::run, clang/test/SemaTemplate/recovery-tree-transform-crash.cpp::test, clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp::CreateAndRunJITFunc, clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp::OptLLVM, clang/tools/clang-fuzzer/handle-llvm/handle_llvm.cpp::getOptLevel, clang/tools/driver/cc1_main.cpp::PrintSupportedExtensions, clang/unittests/AST/DeclPrinterTest.cpp::Args, clang/unittests/Tooling/Syntax/TreeTest.cpp::DiagnosticOptions, clang/unittests/Tooling/Syntax/TreeTest.cpp::addFile, clang/unittests/Tooling/Syntax/TreeTest.cpp::test, clang/unittests/Tooling/Syntax/TreeTest.cpp::tokens, compiler-rt/lib/fuzzer/FuzzerUtil.h::HostToLE, compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.cpp::RenderNeedsSymbolization, compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h::RenderNeedsSymbolization, compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup.cpp::RenderNeedsSymbolization, compiler-rt/test/msan/libatomic.c::__attribute, compiler-rt/test/msan/libatomic.c::copy, compiler-rt/test/msan/libatomic.c::main, compiler-rt/test/msan/scanf-allocate.cpp::main, compiler-rt/test/sanitizer_common/TestCases/Posix/recursion-in-qsort.cpp::ascending_compare_ints, compiler-rt/test/sanitizer_common/TestCases/Posix/recursion-in-qsort.cpp::descending_compare_ints, compiler-rt/test/sanitizer_common/TestCases/Posix/recursion-in-qsort.cpp::main, compiler-rt/test/sanitizer_common/TestCases/Posix/recursion-in-qsort.cpp::sort_and_compare, flang/include/flang/Common/template.h::MapOptional, flang/include/flang/Common/template.h::decltype, flang/include/flang/Evaluate/expression.h::Operation, flang/include/flang/Evaluate/initial-image.h::Incorporate, flang/include/flang/Evaluate/traverse.h::Combine, flang/include/flang/Lower/ConvertType.h::lookup, flang/include/flang/Lower/ConvertType.h::setCurrentType, flang/include/flang/Optimizer/Analysis/TBAAForest.h::TBAAForrest, flang/include/flang/Optimizer/Analysis/TBAAForest.h::buildTree, flang/include/flang/Optimizer/Analysis/TBAAForest.h::getFuncTree, flang/include/flang/Optimizer/Analysis/TBAAForest.h::getTag, flang/include/flang/Optimizer/CodeGen/TypeConverter.h::convertBoxTypeAsStruct, flang/include/flang/Optimizer/CodeGen/TypeConverter.h::convertType, flang/include/flang/Optimizer/Dialect/FIRAttr.h::kindof, flang/include/flang/Optimizer/Dialect/FIRType.h::kindof, flang/include/flang/Optimizer/Dialect/FirAliasTagOpInterface.h::verifyFirAliasTagOpInterface, flang/include/flang/Optimizer/Transforms/Passes.h::createAliasTagsPass, flang/include/flang/Optimizer/Transforms/Passes.h::createVScaleAttrPass, flang/include/flang/Parser/parse-state.h::Say, flang/include/flang/Parser/parsing.h::ForTesting, flang/include/flang/Semantics/semantics.h::GetTempName, flang/include/flang/Semantics/type.h::Bound, flang/lib/Frontend/FrontendActions.cpp::triple, flang/lib/Lower/ConvertExprToHLFIR.cpp::gen, flang/lib/Lower/ConvertExprToHLFIR.cpp::genDataRefAndSkipParentComponents, flang/lib/Optimizer/Analysis/TBAAForest.cpp::globalDataTree, flang/lib/Optimizer/CodeGen/CodeGen.cpp::computeElementDistance, flang/lib/Optimizer/CodeGen/CodeGen.cpp::convertObjectType, flang/lib/Optimizer/CodeGen/CodeGen.cpp::doRewriteBox, flang/lib/Optimizer/CodeGen/CodeGen.cpp::doRewriteRefOrPtr, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getBaseAddrTypeFromBox, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getBoxEleTy, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getBoxTypePair, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getI8Type, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getLlvmObjectTypeFromBoxType, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getLlvmPtrType, flang/lib/Optimizer/CodeGen/CodeGen.cpp::getVoidPtrType, flang/lib/Optimizer/CodeGen/CodeGen.cpp::lowerTy, flang/lib/Optimizer/CodeGen/CodeGen.cpp::voidPtrTy, flang/lib/Optimizer/CodeGen/TypeConverter.cpp::convertBoxType, flang/lib/Optimizer/Transforms/AddAliasTags.cpp::getDeclareOp, flang/lib/Optimizer/Transforms/AddAliasTags.cpp::getFuncArgName, flang/lib/Optimizer/Transforms/AddAliasTags.cpp::runOnAliasInterface, flang/lib/Optimizer/Transforms/AddAliasTags.cpp::runOnOperation, flang/lib/Optimizer/Transforms/OMPFunctionFiltering.cpp::opBuilder, flang/lib/Optimizer/Transforms/VScaleAttr.cpp::runOnOperation, flang/lib/Parser/unparse.cpp::Unparse, flang/lib/Semantics/check-acc-structure.h::AddClauseToCrtContext, flang/lib/Semantics/check-acc-structure.h::CheckAllowed, flang/lib/Semantics/check-acc-structure.h::CheckAtLeastOneClause, flang/lib/Semantics/check-acc-structure.h::CheckMatching, flang/lib/Semantics/check-acc-structure.h::CheckNotAllowedIfClause, flang/lib/Semantics/check-acc-structure.h::CheckOnlyAllowedAfter, flang/lib/Semantics/check-acc-structure.h::CheckRequireAtLeastOneOf, flang/lib/Semantics/check-acc-structure.h::ClauseSetToString, flang/lib/Semantics/check-acc-structure.h::ContextDirectiveAsFortran, flang/lib/Semantics/check-acc-structure.h::PushContext, flang/lib/Semantics/check-acc-structure.h::SayNotMatching, flang/lib/Semantics/check-acc-structure.h::SetClauseSets, flang/lib/Semantics/check-acc-structure.h::SetContextClause, flang/lib/Semantics/check-acc-structure.h::SetContextClauseInfo, flang/lib/Semantics/check-acc-structure.h::getClauseName, flang/lib/Semantics/check-acc-structure.h::getDirectiveName, flang/lib/Semantics/check-data.cpp::HasSurplusValues, flang/lib/Semantics/check-data.cpp::InitDesignator, flang/lib/Semantics/check-data.cpp::InitElement, flang/lib/Semantics/check-data.cpp::IsAtEnd, flang/lib/Semantics/check-data.cpp::LocateSource, flang/lib/Semantics/check-data.cpp::Scan, flang/lib/Semantics/check-data.cpp::SetRepetitionCount, flang/lib/Semantics/check-data.cpp::ValueListIterator, flang/lib/Semantics/check-data.cpp::hasFatalError, flang/lib/Semantics/check-data.h::ConstructInitializer, flang/lib/Semantics/check-data.h::SymbolDataInitialization, flang/lib/Semantics/check-declarations.cpp::SayWithDeclaration, flang/lib/Semantics/check-directive-structure.h::AddClauseToCrtContext, flang/lib/Semantics/check-directive-structure.h::CheckAllowed, flang/lib/Semantics/check-directive-structure.h::CheckAtLeastOneClause, flang/lib/Semantics/check-directive-structure.h::CheckMatching, flang/lib/Semantics/check-directive-structure.h::CheckOnlyAllowedAfter, flang/lib/Semantics/check-directive-structure.h::CheckRequireAtLeastOneOf, flang/lib/Semantics/check-directive-structure.h::CheckRequired, flang/lib/Semantics/check-directive-structure.h::ClauseSetToString, flang/lib/Semantics/check-directive-structure.h::ContextDirectiveAsFortran, flang/lib/Semantics/check-directive-structure.h::CurrentDirectiveIsNested, flang/lib/Semantics/check-directive-structure.h::PushContext, flang/lib/Semantics/check-directive-structure.h::PushContextAndClauseSets, flang/lib/Semantics/check-directive-structure.h::ResetPartialContext, flang/lib/Semantics/check-directive-structure.h::SayNotMatching, flang/lib/Semantics/check-directive-structure.h::SetClauseSets, flang/lib/Semantics/check-directive-structure.h::SetContextAllowed, flang/lib/Semantics/check-directive-structure.h::SetContextClause, flang/lib/Semantics/check-directive-structure.h::SetContextClauseInfo, flang/lib/Semantics/check-directive-structure.h::SetContextDirectiveEnum, flang/lib/Semantics/check-directive-structure.h::SetContextDirectiveSource, flang/lib/Semantics/check-directive-structure.h::SetContextRequired, flang/lib/Semantics/check-directive-structure.h::getClauseName, flang/lib/Semantics/check-directive-structure.h::getDirectiveName, flang/lib/Semantics/check-omp-structure.h::CheckAllowed, flang/lib/Semantics/check-omp-structure.h::CheckRequired, flang/lib/Semantics/check-omp-structure.h::CheckTargetData, flang/lib/Semantics/check-omp-structure.h::CheckTargetUpdate, flang/lib/Semantics/check-omp-structure.h::ContextDirectiveAsFortran, flang/lib/Semantics/check-omp-structure.h::CurrentDirectiveIsNested, flang/lib/Semantics/check-omp-structure.h::Enter, flang/lib/Semantics/check-omp-structure.h::Leave, flang/lib/Semantics/check-omp-structure.h::PushContext, flang/lib/Semantics/check-omp-structure.h::ResetPartialContext, flang/lib/Semantics/check-omp-structure.h::SayNotMatching, flang/lib/Semantics/check-omp-structure.h::SetClauseSets, flang/lib/Semantics/check-omp-structure.h::SetContextAllowed, flang/lib/Semantics/check-omp-structure.h::SetContextAllowedExclusive, flang/lib/Semantics/check-omp-structure.h::SetContextAllowedOnce, flang/lib/Semantics/check-omp-structure.h::SetContextClause, flang/lib/Semantics/check-omp-structure.h::SetContextClauseInfo, flang/lib/Semantics/check-omp-structure.h::SetContextDirectiveEnum, flang/lib/Semantics/check-omp-structure.h::SetContextDirectiveSource, flang/lib/Semantics/check-omp-structure.h::SetContextRequired, flang/lib/Semantics/check-omp-structure.h::getClauseName, flang/lib/Semantics/check-omp-structure.h::getDirectiveName, flang/lib/Semantics/compute-offsets.cpp::DoEquivalenceBlockBase, flang/lib/Semantics/data-to-inits.cpp::HasSurplusValues, flang/lib/Semantics/data-to-inits.cpp::InitDesignator, flang/lib/Semantics/data-to-inits.cpp::InitElement, flang/lib/Semantics/data-to-inits.cpp::IsAtEnd, flang/lib/Semantics/data-to-inits.cpp::LocateSource, flang/lib/Semantics/data-to-inits.cpp::Scan, flang/lib/Semantics/data-to-inits.cpp::SetRepetitionCount, flang/lib/Semantics/data-to-inits.cpp::ValueListIterator, flang/lib/Semantics/data-to-inits.cpp::hasFatalError, flang/lib/Semantics/data-to-inits.h::SymbolDataInitialization, flang/lib/Semantics/resolve-directives.cpp::Pre, flang/runtime/descriptor-io.h::DescriptorIO, flang/runtime/descriptor-io.h::constexpr, flang/runtime/io-api.cpp::EditDefaultCharacterInput, flang/runtime/io-api.cpp::EditDefaultCharacterOutput, flang/runtime/io-api.cpp::EditIntegerInput, flang/runtime/io-api.cpp::EditIntegerOutput, flang/runtime/io-api.cpp::EditLogicalInput, flang/runtime/io-api.cpp::EditLogicalOutput, flang/runtime/io-api.cpp::IONAME, flang/runtime/io-api.cpp::InputComplex, flang/runtime/io-api.cpp::InputReal, flang/runtime/io-api.cpp::ListDirectedDefaultCharacterOutput, flang/runtime/io-api.cpp::ListDirectedLogicalOutput, flang/runtime/io-api.cpp::OutputComplex, flang/runtime/io-api.cpp::OutputReal, flang/runtime/type-code.h::IsLogical, libc/config/linux/app.h::initTLS, libc/loader/linux/x86_64/start.cpp::initTLS, libc/src/ctype/ctype_utils.h::isdigit, libc/src/ctype/ctype_utils.h::islower, libc/src/ctype/ctype_utils.h::isupper, libc/src/ctype/isalnum.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isblank.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isblank.h::isblank, libc/src/ctype/iscntrl.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/iscntrl.h::iscntrl, libc/src/ctype/isgraph.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isgraph.h::isgraph, libc/src/ctype/islower.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isprint.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isprint.h::isprint, libc/src/ctype/ispunct.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/ispunct.h::ispunct, libc/src/ctype/isspace.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isspace.h::isspace, libc/src/ctype/isupper.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isxdigit.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/isxdigit.h::isxdigit, libc/src/ctype/tolower.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/tolower.h::tolower, libc/src/ctype/toupper.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/ctype/toupper.h::toupper, libc/src/string/memory_utils/generic/builtin.h::__builtin_bcmp, libc/src/string/strcspn.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/string/strcspn.h::strcspn, libc/src/string/string_utils.h::complementary_span, libc/src/string/strspn.cpp::LLVM_LIBC_ENTRYPOINT, libc/src/string/strspn.h::strspn, libc/test/loader/linux/tls_test.cpp::main, libc/test/src/ctype/ispunct_test.cpp::is_punctuation_character, libc/utils/CPP/Bitset.h::set, libc/utils/CPP/Bitset.h::test, libc/utils/FPUtil/TestHelpers.cpp::bits, libc/utils/FPUtil/TestHelpers.h::actualBits, libc/utils/FPUtil/TestHelpers.h::explainError, libc/utils/FPUtil/TestHelpers.h::match, libc/utils/UnitTest/Test.cpp::Bits, libc/utils/UnitTest/Test.cpp::LHSBits, libc/utils/UnitTest/Test.cpp::describeValue, lld/COFF/Chunks.h::getArm64ECRangeType, lld/COFF/Chunks.h::getMachine, lld/COFF/DLL.cpp::getMachine, lld/COFF/Writer.cpp::sortECChunks, lld/ELF/Arch/P2.cpp::getRelExpr, lld/ELF/Arch/P2.cpp::relocate, lld/ELF/EhFrame.h::hasLSDA, lld/ELF/InputSection.h::data, lld/ELF/SyntheticSections.h::addSectionAux, lld/ELF/SyntheticSections.h::isFdeLive, lld/ELF/SyntheticSections.h::iterateFDEWithLSDA, lld/ELF/Target.cpp::getP2TargetInfo, lld/MachO/Arch/X86_64.cpp::getSymbolVA, lld/MachO/Driver.cpp::findLibrary, lld/MachO/InputSection.h::isThreadLocalVariables, lld/MachO/Target.h::getSymbolVA, lldb/include/lldb/API/SBTarget.h::LoadCore, lldb/include/lldb/API/SBThreadPlan.h::GetStopOthers, lldb/include/lldb/API/SBThreadPlan.h::SetStopOthers, lldb/include/lldb/API/SBWatchpointOptions.h::GetWatchpointTypeModify, lldb/include/lldb/API/SBWatchpointOptions.h::GetWatchpointTypeWrite, lldb/include/lldb/API/SBWatchpointOptions.h::SetWatchpointTypeModify, lldb/include/lldb/API/SBWatchpointOptions.h::SetWatchpointTypeWrite, lldb/include/lldb/Breakpoint/StoppointSite.h::GetHardwareIndex, lldb/include/lldb/Breakpoint/StoppointSite.h::SetHardwareIndex, lldb/include/lldb/Breakpoint/Watchpoint.h::WatchedValueReportable, lldb/include/lldb/Breakpoint/Watchpoint.h::WatchpointModify, lldb/include/lldb/Core/IOHandlerCursesGUI.h::TerminalSizeChanged, lldb/include/lldb/Symbol/SymbolFile.h::GetSeparateDebugInfo, lldb/include/lldb/Target/Process.h::GetSteppingRunsAllThreads, lldb/include/lldb/Target/Target.h::GetInheritTCC, lldb/include/lldb/Target/Target.h::InheritTCCValueChangedCallback, lldb/include/lldb/Target/Target.h::SetInheritTCC, lldb/include/lldb/Target/ThreadPlanPython.h::SetStopOthers, lldb/include/lldb/Target/ThreadPlanPython.h::StopOthers, lldb/source/API/SBTarget.cpp::LLDB_RECORD_RESULT, lldb/source/API/SBTarget.cpp::WatchpointCreateByAddress, lldb/source/API/SBTarget.cpp::target_sp, lldb/source/API/SBThreadPlan.cpp::thread_plan_sp, lldb/source/API/SBWatchpoint.cpp::watchpoint_sp, lldb/source/API/SBWatchpointOptions.cpp::m_opaque_up, lldb/source/Breakpoint/StoppointSite.cpp::m_id, lldb/source/Breakpoint/Watchpoint.cpp::g_watch_name, lldb/source/Breakpoint/Watchpoint.cpp::watch_name, lldb/source/Commands/CommandObjectTarget.cpp::DoExecute, lldb/source/Commands/CommandObjectTarget.cpp::GetDefinitions, lldb/source/Commands/CommandObjectTarget.cpp::OptionParsingStarting, lldb/source/Commands/CommandObjectTarget.cpp::guard, lldb/source/Core/IOHandlerCursesGUI.cpp::GetBounds, lldb/source/Core/IOHandlerCursesGUI.cpp::GetCursorX, lldb/source/Core/IOHandlerCursesGUI.cpp::GetCursorY, lldb/source/Core/IOHandlerCursesGUI.cpp::GetFrame, lldb/source/Core/IOHandlerCursesGUI.cpp::GetHeight, lldb/source/Core/IOHandlerCursesGUI.cpp::GetMaxX, lldb/source/Core/IOHandlerCursesGUI.cpp::GetMaxY, lldb/source/Core/IOHandlerCursesGUI.cpp::GetParentOrigin, lldb/source/Core/IOHandlerCursesGUI.cpp::GetParentX, lldb/source/Core/IOHandlerCursesGUI.cpp::GetParentY, lldb/source/Core/IOHandlerCursesGUI.cpp::GetSize, lldb/source/Core/IOHandlerCursesGUI.cpp::GetWidth, lldb/source/Core/IOHandlerCursesGUI.cpp::LimitLengthToRestOfLine, lldb/source/Core/IOHandlerCursesGUI.cpp::PrintfTruncated, lldb/source/Core/IOHandlerCursesGUI.cpp::PutCStringTruncated, lldb/source/Core/IOHandlerCursesGUI.cpp::SelectPreviousWindowAsActive, lldb/source/Core/IOHandlerCursesGUI.cpp::TerminalSizeChanged, lldb/source/Core/IOHandlerCursesGUI.cpp::ToggleBreakpointOnSelectedLine, lldb/source/Host/macosx/objcxx/PosixSpawnResponsible.h::__typeof__, lldb/source/Host/macosx/objcxx/PosixSpawnResponsible.h::responsibility_spawnattrs_setdisclaim_ptr, lldb/source/Host/macosx/objcxx/PosixSpawnResponsible.h::setup_posix_spawn_responsible_flag, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.cpp::DeclOrigin, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::DeclOrigin, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::getOrigin, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::hasOrigin, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::m_dst_ctx, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::removeOrigin, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::removeOriginsWithContext, lldb/source/Plugins/ExpressionParser/Clang/ClangASTImporter.h::setOrigin, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::CreateInstance, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::Initialize, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::PlatformDarwin, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::PlatformSP, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::Terminate, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::platform_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.cpp::resolved_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.h::GetPluginName, lldb/source/Plugins/Platform/MacOSX/PlatformAppleSimulator.h::GetPluginVersion, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp::PlatformSP, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp::g_name, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp::platform_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.cpp::resolved_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::GetPluginName, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::GetPluginNameStatic, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::GetPluginVersion, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::GetSDKDirectoryAsCString, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::GetStatus, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::Initialize, lldb/source/Plugins/Platform/MacOSX/PlatformAppleTVSimulator.h::Terminate, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.cpp::PlatformSP, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.cpp::g_name, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.cpp::platform_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.cpp::resolved_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::GetPluginName, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::GetPluginNameStatic, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::GetPluginVersion, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::GetSDKDirectoryAsCString, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::GetStatus, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::Initialize, lldb/source/Plugins/Platform/MacOSX/PlatformAppleWatchSimulator.h::Terminate, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.cpp::PlatformSP, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.cpp::g_name, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.cpp::platform_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.cpp::resolved_module_spec, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::GetPluginName, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::GetPluginNameStatic, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::GetPluginVersion, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::GetSDKDirectoryAsCString, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::GetStatus, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::Initialize, lldb/source/Plugins/Platform/MacOSX/PlatformiOSSimulator.h::Terminate, lldb/source/Plugins/ScriptInterpreter/Python/PythonDataObjects.cpp::PyUnicode_GetLength, lldb/test/API/commands/gui/breakpoints/main.c::main, lldb/test/API/commands/gui/viewlarge/main.c::main, lldb/test/API/commands/target/dump-separate-debug-info/dwo/foo.cpp::foo, lldb/test/API/commands/target/dump-separate-debug-info/dwo/foo.h::foo, lldb/test/API/commands/target/dump-separate-debug-info/dwo/main.cpp::main, lldb/test/API/commands/target/dump-separate-debug-info/oso/foo.cpp::foo, lldb/test/API/commands/target/dump-separate-debug-info/oso/foo.h::foo, lldb/test/API/commands/target/dump-separate-debug-info/oso/main.cpp::main, lldb/test/API/functionalities/watchpoint/modify-watchpoints/main.c::main, lldb/test/API/macosx/macCatalyst/main.c::main, lldb/test/API/python_api/target/main.c::main, lldb/tools/debugserver/source/MacOSX/MachProcess.h::GetProcessPlatformViaDYLDSPI, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::belongsToLoop, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::belongsToSameLoop, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::getSccNum, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::isLoopBackEdge, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::isLoopEnteringEdge, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::isLoopEnteringExitingEdge, llvm/include/llvm/Analysis/BranchProbabilityInfo.h::isLoopExitingEdge, llvm/include/llvm/Analysis/Utils/TFUtils.h::Name, llvm/include/llvm/Analysis/Utils/TFUtils.h::getElementByteSize, llvm/include/llvm/Analysis/Utils/TFUtils.h::getElementCount, llvm/include/llvm/Analysis/Utils/TFUtils.h::isElementType, llvm/include/llvm/CodeGen/CodeGenPassBuilder.h::getOptLevel, llvm/include/llvm/CodeGen/DIE.h::BasicDIEUnit, llvm/include/llvm/CodeGen/DIE.h::DIEUnit, llvm/include/llvm/CodeGen/DIE.h::getAddressSize, llvm/include/llvm/CodeGen/DIE.h::getDwarfVersion, llvm/include/llvm/CodeGen/DIE.h::getLength, llvm/include/llvm/CodeGen/DIE.h::setLength, llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h::translateBinaryOp, llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h::translateFSub, llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h::lowerExtractInsertVectorElt, llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h::lowerExtractVectorElt, llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h::lowerShlSat, llvm/include/llvm/CodeGen/MachinePassManager.h::Base, llvm/include/llvm/CodeGen/MachinePassManager.h::addPass, llvm/include/llvm/CodeGen/MachinePassManager.h::run, llvm/include/llvm/CodeGen/RDFLiveness.h::operator, llvm/include/llvm/CodeGen/RDFRegisters.h::count, llvm/include/llvm/CodeGen/RDFRegisters.h::hash, llvm/include/llvm/CodeGen/RDFRegisters.h::normalize, llvm/include/llvm/CodeGen/RDFRegisters.h::operator, llvm/include/llvm/CodeGen/SelectionDAG.h::Combine, llvm/include/llvm/CodeGen/SelectionDAG.h::SelectionDAG, llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h::disableGenericCombines, llvm/include/llvm/CodeGen/TargetInstrInfo.h::getTailDuplicateSize, llvm/include/llvm/CodeGen/TargetLowering.h::expandShlSat, llvm/include/llvm/CodeGen/TargetLowering.h::getConstraintPreferences, llvm/include/llvm/CodeGen/TargetPassConfig.h::getOptLevel, llvm/include/llvm/CodeGen/TargetSubtargetInfo.h::enableRALocalReassignment, llvm/include/llvm/CodeGen/TargetSubtargetInfo.h::getOptLevelToEnablePostRAScheduler, llvm/include/llvm/DWARFLinker/DWARFLinkerCompileUnit.h::createOutputDIE, llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h::getLastValidFileIndex, llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h::readAddendArm, llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h::readAddendData, llvm/include/llvm/ExecutionEngine/JITLink/aarch32.h::readAddendThumb, llvm/include/llvm/Frontend/OpenMP/OMPIRBuilder.h::writeTeamsForKernel, llvm/include/llvm/IR/InstrTypes.h::classof, llvm/include/llvm/IR/InstrTypes.h::removeAttributes, llvm/include/llvm/IR/Instruction.h::hasNonNeg, llvm/include/llvm/IR/Instruction.h::setNonNeg, llvm/include/llvm/IR/ModuleSummaryIndex.h::hasParamAccess, llvm/include/llvm/IR/PassInstrumentation.h::popBeforeNonSkippedPassCallback, llvm/include/llvm/IR/PassInstrumentation.h::pushBeforeNonSkippedPassCallback, llvm/include/llvm/IR/PassInstrumentation.h::registerBeforeSkippedPassCallback, llvm/include/llvm/IR/PatternMatch.h::m_NSWSub, llvm/include/llvm/InitializePasses.h::initializeBBSectionsPreparePass, llvm/include/llvm/InitializePasses.h::initializeBasicBlockSectionsPass, llvm/include/llvm/LTO/legacy/ThinLTOCodeGenerator.h::setCodeGenOptLevel, llvm/include/llvm/MC/MCInstrAnalysis.h::resetState, llvm/include/llvm/MC/MCInstrAnalysis.h::updateState, llvm/include/llvm/MC/MCSubtargetInfo.h::getAllProcessorFeatures, llvm/include/llvm/Object/ELF.h::decode_relrs, llvm/include/llvm/Object/StackMapParser.h::validateHeader, llvm/include/llvm/Option/OptTable.h::setInitialOptionsFromEnvironment, llvm/include/llvm/Passes/StandardInstrumentations.h::PrintPass, llvm/include/llvm/Support/CodeGen.h::getLevel, llvm/include/llvm/Support/CodeGen.h::parseLevel, llvm/include/llvm/Target/TargetMachine.h::getOptLevel, llvm/include/llvm/Target/TargetMachine.h::setOptLevel, llvm/include/llvm/TargetParser/AArch64TargetParser.h::PrintSupportedExtensions, llvm/include/llvm/Transforms/IPO/Attributor.h::PotentialValuesState, llvm/include/llvm/Transforms/IPO/Attributor.h::checkAndInvalidate, llvm/include/llvm/Transforms/IPO/Attributor.h::classof, llvm/include/llvm/Transforms/IPO/Attributor.h::getBestState, llvm/include/llvm/Transforms/IPO/Attributor.h::getName, llvm/include/llvm/Transforms/IPO/Attributor.h::getWorstState, llvm/include/llvm/Transforms/IPO/Attributor.h::insert, llvm/include/llvm/Transforms/IPO/Attributor.h::intersectWith, llvm/include/llvm/Transforms/IPO/Attributor.h::unionAssumed, llvm/include/llvm/Transforms/IPO/Attributor.h::unionWith, llvm/lib/Analysis/BranchProbabilityInfo.cpp::Edge, llvm/lib/Analysis/BranchProbabilityInfo.cpp::SuccLB, llvm/lib/Analysis/BranchProbabilityInfo.cpp::isLoopEnteringEdge, llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp::print, llvm/lib/Analysis/DevelopmentModeInlineAdvisor.cpp::printTensor, llvm/lib/Analysis/InstructionSimplify.cpp::getFalse, llvm/lib/Analysis/InstructionSimplify.cpp::getMaxMinLimit, llvm/lib/Analysis/InstructionSimplify.cpp::getMaxMinOpposite, llvm/lib/Analysis/InstructionSimplify.cpp::getTrue, llvm/lib/Analysis/InstructionSimplify.cpp::isMinMax, llvm/lib/Analysis/TFUtils.cpp::Name, llvm/lib/Analysis/TFUtils.cpp::TF_DataTypeSize, llvm/lib/Analysis/TFUtils.cpp::TF_TensorData, llvm/lib/CodeGen/AsmPrinter/DIE.cpp::Die, llvm/lib/CodeGen/AsmPrinter/DwarfUnit.cpp::DIEUnit, llvm/lib/CodeGen/AsmPrinter/DwarfUnit.h::getDwarfVersion, llvm/lib/CodeGen/BasicBlockSections.cpp::BBSectionsPrepare, llvm/lib/CodeGen/BasicBlockSections.cpp::BasicBlockSections, llvm/lib/CodeGen/GlobalISel/IRTranslator.cpp::translateBinaryOp, llvm/lib/CodeGen/GlobalISel/InlineAsmLowering.cpp::getConstraintGenerality, llvm/lib/CodeGen/GlobalISel/InstructionSelect.cpp::MachineFunctionPass, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::fewerElementsVectorExtractVectorElt, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::lowerExtractInsertVectorElt, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::lowerExtractVectorElt, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::lowerShlSat, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::widenScalarAddSubSat, llvm/lib/CodeGen/GlobalISel/LegalizerHelper.cpp::widenScalarAddSubShlSat, llvm/lib/CodeGen/RDFLiveness.cpp::Tmp, llvm/lib/CodeGen/RDFRegisters.cpp::Regs, llvm/lib/CodeGen/SelectionDAG/FastISel.cpp::selectFNeg, llvm/lib/CodeGen/SelectionDAG/LegalizeIntegerTypes.cpp::ExpandIntRes_SHLSAT, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::ExpandIntRes_SHLSAT, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::PromoteIntRes_ADDSUBSAT, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::PromoteIntRes_ADDSUBSHLSAT, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::WidenVSELECTAndMask, llvm/lib/CodeGen/SelectionDAG/LegalizeTypes.h::WidenVSELECTMask, llvm/lib/CodeGen/SelectionDAG/ScheduleDAGRRList.cpp::ScheduleDAGSDNodes, llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp::getConstraintGenerality, llvm/lib/CodeGen/SelectionDAG/TargetLowering.cpp::getConstraintPiority, llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp::NameStr, llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp::getContext, llvm/lib/CodeGen/TargetPassConfig.cpp::getOptLevel, llvm/lib/ExecutionEngine/JITLink/aarch32.cpp::readAddendArm, llvm/lib/ExecutionEngine/JITLink/aarch32.cpp::readAddendData, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::ExitIP, llvm/lib/Frontend/OpenMP/OMPIRBuilder.cpp::MDB, llvm/lib/LTO/LTOCodeGenerator.cpp::Extension, llvm/lib/Support/CommandLine.cpp::ExpandResponseFiles, llvm/lib/Support/X86TargetParser.cpp::any, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::LowerDIV, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::LowerMUL, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::LowerToPredicatedOp, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::LowerToScalableOp, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::LowerXOR, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::convertFromScalableVector, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AArch64/AArch64ISelLowering.h::LowerDIV, llvm/lib/Target/AArch64/AArch64ISelLowering.h::LowerMUL, llvm/lib/Target/AArch64/AArch64ISelLowering.h::LowerToScalableOp, llvm/lib/Target/AArch64/AArch64ISelLowering.h::LowerXOR, llvm/lib/Target/AArch64/AArch64ISelLowering.h::useSVEForFixedLengthVectorVT, llvm/lib/Target/AArch64/AArch64InstrInfo.h::getTailDuplicateSize, llvm/lib/Target/AArch64/AArch64RegisterInfo.cpp::hasSVEArgsOrReturn, llvm/lib/Target/AArch64/AArch64RegisterInfo.h::hasSVEArgsOrReturn, llvm/lib/Target/AArch64/GISel/AArch64InstructionSelector.cpp::EntryBuilder, llvm/lib/Target/AMDGPU/AMDGPUCallLowering.cpp::getMultipleType, llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp::combineBallotPattern, llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.cpp::isBoolSGPR, llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.h::AMDGPUDAGToDAGISel, llvm/lib/Target/AMDGPU/AMDGPUISelDAGToDAG.h::SelectBRCONDZ, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp::getDSShaderTypeValue, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp::selectG_FRAME_INDEX_GLOBAL_VALUE, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp::selectG_GLOBAL_VALUE, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.cpp::selectReturnAddress, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.h::selectG_FRAME_INDEX_GLOBAL_VALUE, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.h::selectG_GLOBAL_VALUE, llvm/lib/Target/AMDGPU/AMDGPUInstructionSelector.h::selectReturnAddress, llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp::SGPR01, llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp::getDSFPAtomicOpcode, llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp::insertLiveInCopy, llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp::legalizeDSAtomicFPIntrinsic, llvm/lib/Target/AMDGPU/AMDGPULegalizerInfo.cpp::legalizeRsqClampIntrinsic, llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp::regBankBoolUnion, llvm/lib/Target/AMDGPU/AMDGPURegisterBankInfo.cpp::regBankUnion, llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.h::BaseT, llvm/lib/Target/AMDGPU/AMDGPUTargetTransformInfo.h::Mode, llvm/lib/Target/AMDGPU/R600ISelDAGToDAG.cpp::R600DAGToDAGISel, llvm/lib/Target/AMDGPU/SIFrameLowering.cpp::frameTriviallyRequiresSP, llvm/lib/Target/AMDGPU/SIFrameLowering.h::requiresStackPointerReference, llvm/lib/Target/AMDGPU/SIISelLowering.cpp::isBoolSGPR, llvm/lib/Target/AMDGPU/SIISelLowering.cpp::lowerRawBufferAtomicIntrin, llvm/lib/Target/AMDGPU/SIISelLowering.cpp::lowerStructBufferAtomicIntrin, llvm/lib/Target/AMDGPU/SIISelLowering.cpp::performMemSDNodeCombine, llvm/lib/Target/AMDGPU/SIISelLowering.h::allowsMisalignedMemoryAccessesImpl, llvm/lib/Target/AMDGPU/SIISelLowering.h::isBoolSGPR, llvm/lib/Target/AMDGPU/SIInstrInfo.h::getDSShaderTypeValue, llvm/lib/Target/AMDGPU/SIRegisterInfo.cpp::Register, llvm/lib/Target/ARM/ARMISelDAGToDAG.cpp::ARMDAGToDAGISel, llvm/lib/Target/BPF/BPFAbstractMemberAccess.cpp::AccessStr, llvm/lib/Target/BPF/BPFTargetMachine.h::adjustPassManager, llvm/lib/Target/CSKY/CSKYISelDAGToDAG.cpp::CSKYDAGToDAGISel, llvm/lib/Target/MSP430/MSP430ISelDAGToDAG.cpp::MSP430DAGToDAGISel, llvm/lib/Target/Mips/Mips16ISelDAGToDAG.h::Mips16DAGToDAGISel, llvm/lib/Target/Mips/MipsISelDAGToDAG.h::MipsDAGToDAGISel, llvm/lib/Target/Mips/MipsSEISelDAGToDAG.h::MipsSEDAGToDAGISel, llvm/lib/Target/Mips/MipsSubtarget.h::getOptLevelToEnablePostRAScheduler, llvm/lib/Target/NVPTX/NVPTXISelDAGToDAG.h::NVPTXDAGToDAGISel, llvm/lib/Target/NVPTX/NVPTXISelLowering.h::allowFMA, llvm/lib/Target/P2/AsmParser/P2AsmParser.cpp::MatchAndEmitInstruction, llvm/lib/Target/P2/AsmParser/P2AsmParser.cpp::getReg, llvm/lib/Target/P2/Disassembler/P2Disassembler.cpp::decodeCogJumpTarget, llvm/lib/Target/P2/Disassembler/P2Disassembler.cpp::decodeJump9Target, llvm/lib/Target/P2/MCTargetDesc/P2AsmBackend.cpp::adjustFixupValue, llvm/lib/Target/P2/MCTargetDesc/P2AsmBackend.h::writeNopData, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::getCondition, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::getDNum, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::getInstructionForm, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::getSNum, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::hasDField, llvm/lib/Target/P2/MCTargetDesc/P2BaseInfo.h::hasSField, llvm/lib/Target/P2/MCTargetDesc/P2ELFObjectWriter.cpp::getRelocType, llvm/lib/Target/P2/MCTargetDesc/P2InstPrinter.cpp::StringRef, llvm/lib/Target/P2/MCTargetDesc/P2InstPrinter.h::printCondition, llvm/lib/Target/P2/MCTargetDesc/P2InstPrinter.h::printEffect, llvm/lib/Target/P2/MCTargetDesc/P2MCAsmInfo.h::P2MCAsmInfo, llvm/lib/Target/P2/MCTargetDesc/P2MCAsmInfo.h::anchor, llvm/lib/Target/P2/MCTargetDesc/P2MCCodeEmitter.cpp::P2MCCodeEmitter, llvm/lib/Target/P2/MCTargetDesc/P2MCCodeEmitter.cpp::getExprOpValue, llvm/lib/Target/P2/MCTargetDesc/P2MCCodeEmitter.h::getCogJumpTargetOpValue, llvm/lib/Target/P2/MCTargetDesc/P2MCCodeEmitter.h::getJump9TargetOpValue, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.cpp::LowerSymbolOperand, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.cpp::lowerSymbolOperand, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::LowerSymbolOperand, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::canAug, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::createAugInst, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::lowerInstruction, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::lowerOperand, llvm/lib/Target/P2/MCTargetDesc/P2MCInstLower.h::lowerSymbolOperand, llvm/lib/Target/P2/MCTargetDesc/P2MCTargetDesc.h::createP2ELFObjectWriter, llvm/lib/Target/P2/P2AsmPrinter.h::emitInlineAsmEnd, llvm/lib/Target/P2/P2AsmPrinter.h::emitInlineAsmStart, llvm/lib/Target/P2/P2DelJmp0.cpp::DelJmp0, llvm/lib/Target/P2/P2DelJmp0.cpp::getPassName, llvm/lib/Target/P2/P2DelJmp0.cpp::runOnMachineBasicBlock, llvm/lib/Target/P2/P2DelJmp0.cpp::runOnMachineFunction, llvm/lib/Target/P2/P2DelUselessJMP.cpp::DelJmp, llvm/lib/Target/P2/P2DelUselessJMP.cpp::EnableDelJmp, llvm/lib/Target/P2/P2DelUselessJMP.cpp::getPassName, llvm/lib/Target/P2/P2DelUselessJMP.cpp::runOnMachineBasicBlock, llvm/lib/Target/P2/P2DelUselessJMP.cpp::runOnMachineFunction, llvm/lib/Target/P2/P2ExpandPseudos.cpp::expand_SELECTCC, llvm/lib/Target/P2/P2FrameLowering.cpp::address, llvm/lib/Target/P2/P2FrameLowering.cpp::argument, llvm/lib/Target/P2/P2FrameLowering.cpp::first, llvm/lib/Target/P2/P2FrameLowering.cpp::function, llvm/lib/Target/P2/P2FrameLowering.cpp::pointer, llvm/lib/Target/P2/P2FrameLowering.h::P2FrameLowering, llvm/lib/Target/P2/P2FrameLowering.h::TargetFrameLowering, llvm/lib/Target/P2/P2FrameLowering.h::determineCalleeSaves, llvm/lib/Target/P2/P2FrameLowering.h::emitEpilogue, llvm/lib/Target/P2/P2FrameLowering.h::emitPrologue, llvm/lib/Target/P2/P2FrameLowering.h::hasFP, llvm/lib/Target/P2/P2ISelDAGToDAG.cpp::P2DAGToDAGISel, llvm/lib/Target/P2/P2ISelDAGToDAG.h::P2DAGToDAGISel, llvm/lib/Target/P2/P2ISelDAGToDAG.h::Select, llvm/lib/Target/P2/P2ISelDAGToDAG.h::SelectionDAGISel, llvm/lib/Target/P2/P2ISelDAGToDAG.h::getPassName, llvm/lib/Target/P2/P2ISelDAGToDAG.h::runOnMachineFunction, llvm/lib/Target/P2/P2ISelDAGToDAG.h::selectAddr, llvm/lib/Target/P2/P2ISelDAGToDAG.h::selectMultiplication, llvm/lib/Target/P2/P2ISelLowering.cpp::getRegisterByName, llvm/lib/Target/P2/P2ISelLowering.h::getRegisterByName, llvm/lib/Target/P2/P2InstrInfo.cpp::isTJOpcode, llvm/lib/Target/P2/P2InstrInfo.h::P2InstrInfo, llvm/lib/Target/P2/P2InstrInfo.h::anchor, llvm/lib/Target/P2/P2InstrInfo.h::removeBranch, llvm/lib/Target/P2/P2MCInstLower.cpp::LowerSymbolOperand, llvm/lib/Target/P2/P2MCInstLower.cpp::MCOperand, llvm/lib/Target/P2/P2MCInstLower.h::Initialize, llvm/lib/Target/P2/P2MCInstLower.h::LowerSymbolOperand, llvm/lib/Target/P2/P2MCInstLower.h::lowerInstruction, llvm/lib/Target/P2/P2MCInstLower.h::lowerOperand, llvm/lib/Target/P2/P2MachineFunctionInfo.h::isCogex, llvm/lib/Target/P2/P2RegisterInfo.cpp::Reserved, llvm/lib/Target/P2/P2RegisterInfo.h::eliminateFrameIndex, llvm/lib/Target/P2/P2RegisterInfo.h::getFrameRegister, llvm/lib/Target/P2/P2RegisterInfo.h::getReservedRegs, llvm/lib/Target/P2/P2RegisterInfo.h::requiresRegisterScavenging, llvm/lib/Target/P2/P2Subtarget.h::isCogex, llvm/lib/Target/P2/P2TargetObjectFile.h::Initialize, llvm/lib/Target/PowerPC/PPCISelDAGToDAG.cpp::PPCDAGToDAGISel, llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp::Handler, llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp::RISCVIncomingValueHandler, llvm/lib/Target/RISCV/GISel/RISCVCallLowering.cpp::markPhysRegUsed, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::getGPRState, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::getRegIndex, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::isGPR, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::resetState, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::setGPRState, llvm/lib/Target/RISCV/MCTargetDesc/RISCVMCTargetDesc.cpp::updateState, llvm/lib/Target/RISCV/RISCVISelLowering.cpp::SDValue, llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp::hasFixedResult, llvm/lib/Target/RISCV/RISCVInsertVSETVLI.cpp::willVLBeAVL, llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp::MIRBuilder, llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp::selectExtInst, llvm/lib/Target/SPIRV/SPIRVInstructionSelector.cpp::selectLog10, llvm/lib/Target/SPIRV/SPIRVSubtarget.cpp::computePointerSize, llvm/lib/Target/VE/VEISelLowering.cpp::SDValue, llvm/lib/Target/VE/VEISelLowering.cpp::combineTRUNCATE, llvm/lib/Target/VE/VEISelLowering.cpp::isI32Insn, llvm/lib/Target/VE/VEISelLowering.h::PerformDAGCombine, llvm/lib/Target/VE/VEISelLowering.h::combineTRUNCATE, llvm/lib/Target/X86/MCTargetDesc/X86BaseInfo.h::canUseApxExtendedReg, llvm/lib/Target/X86/X86ISelDAGToDAG.cpp::X86DAGToDAGISel, llvm/lib/Target/XCore/XCoreISelDAGToDAG.cpp::SelectionDAGISel, llvm/lib/Target/XCore/XCoreISelDAGToDAG.cpp::XCoreDAGToDAGISel, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAPotentialValues, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAPotentialValuesFloating, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAPotentialValuesFunction, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::AAPotentialValuesImpl, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::Base, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAsStr, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getAssociatedValue, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::getState, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::indicatePessimisticFixpoint, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::initialize, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::trackStatistics, llvm/lib/Transforms/IPO/AttributorAttributes.cpp::updateImpl, llvm/lib/Transforms/InstCombine/InstCombineCompares.cpp::ICmpInst, llvm/lib/Transforms/InstCombine/InstCombineSelect.cpp::replaceInstUsesWith, llvm/lib/Transforms/InstCombine/InstructionCombining.cpp::CondVal, llvm/lib/Transforms/InstCombine/InstructionCombining.cpp::replaceInstUsesWith, llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp::IRB, llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp::NextIRB, llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp::visitLibAtomicLoad, llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp::visitLibAtomicStore, llvm/lib/Transforms/Scalar/JumpThreading.cpp::ProcessBranchOnPHI, llvm/lib/Transforms/Utils/SimplifyCFG.cpp::isCleanupBlockEmpty, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::Hints, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::collectInLoopReductions, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::completeLoopSkeleton, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::createInductionResumeValues, llvm/lib/Transforms/Vectorize/LoopVectorize.cpp::isInLoopReduction, llvm/lib/Transforms/Vectorize/SLPVectorizer.cpp::getAggregateSize, llvm/lib/Transforms/Vectorize/VPlan.h::VPRecipeBase, llvm/lib/Transforms/Vectorize/VPlan.h::classof, llvm/lib/Transforms/Vectorize/VPlan.h::execute, llvm/tools/lli/lli.cpp::getOptLevel, llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp::createFileError, llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp::createStaticLibrary, llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp::parseCommandLine, llvm/tools/llvm-libtool-darwin/llvm-libtool-darwin.cpp::processFileList, llvm/tools/llvm-rc/ResourceScriptStmt.h::addString, llvm/tools/llvm-rc/ResourceScriptStmt.h::addStrings, llvm/tools/llvm-readobj/COFFDumper.cpp::createError, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::COM, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClBasenames, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClBasenamesShort, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClBinaryNameAliasE, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClDefaultArch, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClPrettyPrintShort, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClPrintFunctionsShort, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::ClVerbose, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::Hint, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::Printer, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::Saver, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::Symbolizer, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::main, llvm/tools/llvm-symbolizer/llvm-symbolizer.cpp::parseIntArg, llvm/tools/obj2yaml/elf2yaml.cpp::Dumper, llvm/tools/obj2yaml/elf2yaml.cpp::Obj, llvm/tools/obj2yaml/elf2yaml.cpp::elf2yaml, llvm/tools/obj2yaml/elf2yaml.cpp::shouldPrintSection, llvm/tools/opt/opt.cpp::GetCodeGenOptLevel, llvm/unittests/CodeGen/GlobalISel/KnownBitsTest.cpp::Info, llvm/unittests/CodeGen/GlobalISel/KnownBitsTest.cpp::MIB, llvm/unittests/CodeGen/GlobalISel/KnownBitsTest.cpp::Mask, llvm/unittests/CodeGen/GlobalISel/KnownBitsTest.cpp::NewMMO, llvm/unittests/CodeGen/PassManagerTest.cpp::CGAM, llvm/unittests/CodeGen/PassManagerTest.cpp::Count, llvm/unittests/CodeGen/PassManagerTest.cpp::FAM, llvm/unittests/CodeGen/PassManagerTest.cpp::LAM, llvm/unittests/CodeGen/PassManagerTest.cpp::MAM, llvm/unittests/CodeGen/PassManagerTest.cpp::NestedMFPM, llvm/unittests/CodeGen/PassManagerTest.cpp::Result, llvm/unittests/CodeGen/PassManagerTest.cpp::doFinalization, llvm/unittests/CodeGen/PassManagerTest.cpp::doInitialization, llvm/unittests/CodeGen/PassManagerTest.cpp::parseAssemblyString, llvm/unittests/CodeGen/PassManagerTest.cpp::parseIR, llvm/unittests/CodeGen/PassManagerTest.cpp::run, llvm/unittests/DebugInfo/DWARF/DwarfGenerator.h::getAddressSize, llvm/unittests/DebugInfo/DWARF/DwarfGenerator.h::getLength, llvm/unittests/DebugInfo/DWARF/DwarfGenerator.h::getVersion, llvm/unittests/DebugInfo/DWARF/DwarfGenerator.h::setLength, llvm/unittests/ExecutionEngine/MCJIT/MCJITTestBase.h::TrivialModuleBuilder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::AllocaIP, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Builder, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::Loc, llvm/unittests/Frontend/OpenMPIRBuilderTest.cpp::OMPBuilder, mlir/examples/standalone/lib/Standalone/StandaloneDialect.cpp::Dialect, mlir/examples/toy/Ch7/include/toy/Dialect.h::kindof, mlir/include/mlir-c/IR.h::mlirAttributeDump, mlir/include/mlir-c/IR.h::mlirAttributeParseGet, mlir/include/mlir-c/IR.h::mlirBlockAppendOwnedOperation, mlir/include/mlir-c/IR.h::mlirBlockCreate, mlir/include/mlir-c/IR.h::mlirBlockDestroy, mlir/include/mlir-c/IR.h::mlirBlockGetArgument, mlir/include/mlir-c/IR.h::mlirBlockGetFirstOperation, mlir/include/mlir-c/IR.h::mlirBlockGetNextInRegion, mlir/include/mlir-c/IR.h::mlirBlockGetNumArguments, mlir/include/mlir-c/IR.h::mlirBlockIsNull, mlir/include/mlir-c/IR.h::mlirContextCreate, mlir/include/mlir-c/IR.h::mlirContextDestroy, mlir/include/mlir-c/IR.h::mlirLocationUnknownGet, mlir/include/mlir-c/IR.h::mlirModuleCreateEmpty, mlir/include/mlir-c/IR.h::mlirModuleCreateParse, mlir/include/mlir-c/IR.h::mlirModuleDestroy, mlir/include/mlir-c/IR.h::mlirModuleGetOperation, mlir/include/mlir-c/IR.h::mlirNamedAttributeGet, mlir/include/mlir-c/IR.h::mlirOperationCreate, mlir/include/mlir-c/IR.h::mlirOperationDestroy, mlir/include/mlir-c/IR.h::mlirOperationDump, mlir/include/mlir-c/IR.h::mlirOperationGetAttribute, mlir/include/mlir-c/IR.h::mlirOperationGetNextInBlock, mlir/include/mlir-c/IR.h::mlirOperationGetNumAttributes, mlir/include/mlir-c/IR.h::mlirOperationGetNumOperands, mlir/include/mlir-c/IR.h::mlirOperationGetNumRegions, mlir/include/mlir-c/IR.h::mlirOperationGetNumResults, mlir/include/mlir-c/IR.h::mlirOperationGetNumSuccessors, mlir/include/mlir-c/IR.h::mlirOperationGetOperand, mlir/include/mlir-c/IR.h::mlirOperationGetRegion, mlir/include/mlir-c/IR.h::mlirOperationGetResult, mlir/include/mlir-c/IR.h::mlirOperationGetSuccessor, mlir/include/mlir-c/IR.h::mlirOperationIsNull, mlir/include/mlir-c/IR.h::mlirOperationStateGet, mlir/include/mlir-c/IR.h::mlirRegionAppendOwnedBlock, mlir/include/mlir-c/IR.h::mlirRegionCreate, mlir/include/mlir-c/IR.h::mlirRegionDestroy, mlir/include/mlir-c/IR.h::mlirRegionGetFirstBlock, mlir/include/mlir-c/IR.h::mlirRegionIsNull, mlir/include/mlir-c/IR.h::mlirTypeDump, mlir/include/mlir-c/IR.h::mlirTypeParseGet, mlir/include/mlir-c/IR.h::mlirValueGetType, mlir/include/mlir-c/Registration.h::mlirRegisterAllDialects, mlir/include/mlir/Analysis/AffineStructures.h::addAffineIfOpDomain, mlir/include/mlir/Bytecode/BytecodeImplementation.h::getDialectVersion, mlir/include/mlir/Bytecode/BytecodeWriter.h::setDialectVersion, mlir/include/mlir/Conversion/LLVMCommon/TypeConverter.h::convertVectorType, mlir/include/mlir/Conversion/LLVMCommon/TypeConverter.h::useOpaquePointers, mlir/include/mlir/Dialect/GPU/IR/CompilationInterfaces.h::getDefaultCompilationTarget, mlir/include/mlir/Dialect/LLVMIR/FunctionCallUtils.h::lookupOrCreateFreeFn, mlir/include/mlir/Dialect/LLVMIR/FunctionCallUtils.h::lookupOrCreateGenericFreeFn, mlir/include/mlir/Dialect/LLVMIR/FunctionCallUtils.h::lookupOrCreateMallocFn, mlir/include/mlir/Dialect/LLVMIR/LLVMTypes.h::classof, mlir/include/mlir/Dialect/LLVMIR/LLVMTypes.h::kindof, mlir/include/mlir/Dialect/Linalg/IR/LinalgTypes.h::kindof, mlir/include/mlir/Dialect/Mesh/IR/MeshOps.h::areReductionAndPartialMatch, mlir/include/mlir/Dialect/Mesh/IR/MeshOps.h::getPartialTypeFromReduction, mlir/include/mlir/Dialect/Mesh/IR/MeshOps.h::isReductionLoop, mlir/include/mlir/Dialect/Mesh/IR/MeshOps.h::removeTrailingEmptySubArray, mlir/include/mlir/Dialect/Mesh/Interfaces/ShardingInterface.h::defaultGetShardingOption, mlir/include/mlir/Dialect/Mesh/Transforms/Passes.h::createShardingPropagationPass, mlir/include/mlir/Dialect/Quant/QuantTypes.h::classof, mlir/include/mlir/Dialect/Quant/QuantTypes.h::kindof, mlir/include/mlir/Dialect/SPIRV/SPIRVAttributes.h::kindof, mlir/include/mlir/Dialect/SPIRV/SPIRVTypes.h::kindof, mlir/include/mlir/Dialect/SPIRV/TargetAndABI.h::getAddressingModel, mlir/include/mlir/Dialect/SPIRV/TargetAndABI.h::getExecutionModel, mlir/include/mlir/Dialect/SPIRV/TargetAndABI.h::getMemoryModel, mlir/include/mlir/Dialect/SPIRV/TargetAndABI.h::needsInterfaceVarABIAttrs, mlir/include/mlir/Dialect/Shape/IR/Shape.h::kindof, mlir/include/mlir/Dialect/Tosa/IR/ShardingInterfaceImpl.h::registerShardingInterfaceExternalModels, mlir/include/mlir/Dialect/Transform/IR/TransformDialect.h::getPreloadedTransformModule, mlir/include/mlir/Dialect/Transform/Transforms/TransformInterpreterUtils.h::getPreloadedTransformModule, mlir/include/mlir/Dialect/Utils/IndexingUtils.h::getArrayOfI32Array, mlir/include/mlir/Dialect/Vector/VectorTransforms.h::defaultFilter, mlir/include/mlir/Dialect/Vector/VectorTransforms.h::success, mlir/include/mlir/IR/AffineExpr.h::replace, mlir/include/mlir/IR/AttributeSupport.h::AbstractAttribute, mlir/include/mlir/IR/AttributeSupport.h::dialect, mlir/include/mlir/IR/AttributeSupport.h::getTypeID, mlir/include/mlir/IR/Attributes.h::attr, mlir/include/mlir/IR/Attributes.h::attrKind, mlir/include/mlir/IR/Attributes.h::classof, mlir/include/mlir/IR/Attributes.h::getTypeID, mlir/include/mlir/IR/Attributes.h::kindof, mlir/include/mlir/IR/Builders.h::getArrayOfI32ArrayAttr, mlir/include/mlir/IR/Builders.h::getFunctionType, mlir/include/mlir/IR/Builders.h::getTupleType, mlir/include/mlir/IR/Dialect.h::ConcreteDialect, mlir/include/mlir/IR/Dialect.h::getTypeID, mlir/include/mlir/IR/Dialect.h::registerDialect, mlir/include/mlir/IR/Location.h::classof, mlir/include/mlir/IR/Location.h::kindof, mlir/include/mlir/IR/MLIRContext.h::dialect, mlir/include/mlir/IR/OperationSupport.h::TypeRange, mlir/include/mlir/IR/OperationSupport.h::dereference_iterator, mlir/include/mlir/IR/OperationSupport.h::offset_base, mlir/include/mlir/IR/OperationSupport.h::unwrap, mlir/include/mlir/IR/StandardTypes.h::classof, mlir/include/mlir/IR/StandardTypes.h::isValidElementType, mlir/include/mlir/IR/StandardTypes.h::kindof, mlir/include/mlir/IR/StorageUniquerSupport.h::mutate, mlir/include/mlir/IR/TypeRange.h::TypeRange, mlir/include/mlir/IR/TypeRange.h::dereference_iterator, mlir/include/mlir/IR/TypeRange.h::getEmptyKey, mlir/include/mlir/IR/TypeRange.h::getHashValue, mlir/include/mlir/IR/TypeRange.h::getTombstoneKey, mlir/include/mlir/IR/TypeRange.h::hash_value, mlir/include/mlir/IR/TypeRange.h::isEmptyKey, mlir/include/mlir/IR/TypeRange.h::isEqual, mlir/include/mlir/IR/TypeRange.h::isTombstoneKey, mlir/include/mlir/IR/TypeRange.h::offset_base, mlir/include/mlir/IR/TypeRange.h::unwrap, mlir/include/mlir/IR/TypeSupport.h::AbstractType, mlir/include/mlir/IR/TypeSupport.h::abstractType, mlir/include/mlir/IR/TypeSupport.h::dialect, mlir/include/mlir/IR/TypeSupport.h::getSubclassData, mlir/include/mlir/IR/TypeSupport.h::getTypeID, mlir/include/mlir/IR/TypeSupport.h::setSubclassData, mlir/include/mlir/IR/Types.h::getNumInputs, mlir/include/mlir/IR/Types.h::getSubclassData, mlir/include/mlir/IR/Types.h::getTypeID, mlir/include/mlir/IR/Types.h::kindof, mlir/include/mlir/IR/Types.h::setSubclassData, mlir/include/mlir/Reducer/Passes/FunctionReducer.h::generateVariants, mlir/include/mlir/Reducer/ReductionNode.h::getModule, mlir/include/mlir/Reducer/ReductionNode.h::getSize, mlir/include/mlir/Reducer/ReductionNode.h::isEvaluated, mlir/include/mlir/Reducer/ReductionNode.h::isInteresting, mlir/include/mlir/Reducer/ReductionNode.h::linkVariant, mlir/include/mlir/Reducer/ReductionNode.h::measureAndTest, mlir/include/mlir/Reducer/ReductionNode.h::organizeVariants, mlir/include/mlir/Reducer/ReductionNode.h::variantsEmpty, mlir/include/mlir/Reducer/ReductionTreePass.h::root, mlir/include/mlir/Reducer/ReductionTreePass.h::runOnOperation, mlir/include/mlir/Reducer/ReductionTreePass.h::updateGoldenModule, mlir/include/mlir/Reducer/Tester.h::getMostReduced, mlir/include/mlir/Reducer/Tester.h::isInteresting, mlir/include/mlir/Reducer/Tester.h::setMostReduced, mlir/include/mlir/Support/StorageUniquer.h::erase, mlir/include/mlir/Support/StorageUniquer.h::mutate, mlir/include/mlir/Support/StorageUniquer.h::mutateImpl, mlir/include/mlir/Support/StorageUniquer.h::registerStorageType, mlir/include/mlir/Target/LLVMIR.h::translateModuleToLLVMIR, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::prepareLLVMModule, mlir/include/mlir/Target/LLVMIR/ModuleTranslation.h::translateModule, mlir/include/mlir/Target/LLVMIR/TypeTranslation.h::translateType, mlir/include/mlir/Target/LLVMIR/TypeTranslation.h::translateTypeFromLLVMIR, mlir/include/mlir/Target/NVVMIR.h::translateModuleToNVVMIR, mlir/include/mlir/Target/ROCDLIR.h::translateModuleToROCDLIR, mlir/include/mlir/Target/SPIRV/Target.h::registerSPIRVTargetInterfaceExternalModels, mlir/lib/Analysis/AffineAnalysis.cpp::dstAccess, mlir/lib/Analysis/AffineAnalysis.cpp::failure, mlir/lib/Analysis/AffineAnalysis.cpp::getIndexSet, mlir/lib/Analysis/AffineAnalysis.cpp::srcAccess, mlir/lib/Analysis/AffineStructures.cpp::cst, mlir/lib/Bytecode/Writer/BytecodeWriter.cpp::failure, mlir/lib/Bytecode/Writer/IRNumbering.cpp::failure, mlir/lib/Bytecode/Writer/IRNumbering.cpp::state, mlir/lib/Bytecode/Writer/IRNumbering.cpp::writer, mlir/lib/CAPI/IR/IR.cpp::cppState, mlir/lib/CAPI/IR/IR.cpp::mlirAttributeDump, mlir/lib/CAPI/IR/IR.cpp::mlirAttributeParseGet, mlir/lib/CAPI/IR/IR.cpp::mlirBlockAppendOwnedOperation, mlir/lib/CAPI/IR/IR.cpp::mlirBlockCreate, mlir/lib/CAPI/IR/IR.cpp::mlirBlockDestroy, mlir/lib/CAPI/IR/IR.cpp::mlirBlockGetArgument, mlir/lib/CAPI/IR/IR.cpp::mlirBlockGetFirstOperation, mlir/lib/CAPI/IR/IR.cpp::mlirBlockGetNextInRegion, mlir/lib/CAPI/IR/IR.cpp::mlirBlockGetNumArguments, mlir/lib/CAPI/IR/IR.cpp::mlirBlockIsNull, mlir/lib/CAPI/IR/IR.cpp::mlirContextCreate, mlir/lib/CAPI/IR/IR.cpp::mlirContextDestroy, mlir/lib/CAPI/IR/IR.cpp::mlirLocationUnknownGet, mlir/lib/CAPI/IR/IR.cpp::mlirModuleCreateEmpty, mlir/lib/CAPI/IR/IR.cpp::mlirModuleCreateParse, mlir/lib/CAPI/IR/IR.cpp::mlirModuleDestroy, mlir/lib/CAPI/IR/IR.cpp::mlirModuleGetOperation, mlir/lib/CAPI/IR/IR.cpp::mlirNamedAttributeGet, mlir/lib/CAPI/IR/IR.cpp::mlirOperationCreate, mlir/lib/CAPI/IR/IR.cpp::mlirOperationDestroy, mlir/lib/CAPI/IR/IR.cpp::mlirOperationDump, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetAttribute, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNextInBlock, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNumAttributes, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNumOperands, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNumRegions, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNumResults, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetNumSuccessors, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetOperand, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetRegion, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetResult, mlir/lib/CAPI/IR/IR.cpp::mlirOperationGetSuccessor, mlir/lib/CAPI/IR/IR.cpp::mlirOperationIsNull, mlir/lib/CAPI/IR/IR.cpp::mlirOperationStateGet, mlir/lib/CAPI/IR/IR.cpp::mlirRegionAppendOwnedBlock, mlir/lib/CAPI/IR/IR.cpp::mlirRegionCreate, mlir/lib/CAPI/IR/IR.cpp::mlirRegionDestroy, mlir/lib/CAPI/IR/IR.cpp::mlirRegionGetFirstBlock, mlir/lib/CAPI/IR/IR.cpp::mlirRegionIsNull, mlir/lib/CAPI/IR/IR.cpp::mlirTypeDump, mlir/lib/CAPI/IR/IR.cpp::mlirTypeParseGet, mlir/lib/CAPI/IR/IR.cpp::mlirValueGetType, mlir/lib/CAPI/IR/IR.cpp::unwrap, mlir/lib/CAPI/IR/IR.cpp::wrap, mlir/lib/CAPI/Registration/Registration.cpp::mlirRegisterAllDialects, mlir/lib/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRV.cpp::failure, mlir/lib/Conversion/ControlFlowToSPIRV/ControlFlowToSPIRV.cpp::success, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::ConvertOpToGpuRuntimeCallPattern, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::OpBuilder, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::allocatePointer, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::builder, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::converter, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::declareGpuRuntimeFunctions, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::failure, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::functionName, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getInt32Type, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getInt64Type, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getInt8Type, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getIntPtrType, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getLLVMDialect, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getPointerPointerType, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getPointerType, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::getVoidType, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::initializeCachedTypes, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::runOnOperation, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::setupParamsArray, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::signalPassFailure, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::success, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::target, mlir/lib/Conversion/GPUCommon/ConvertLaunchFuncToRuntimeCalls.cpp::translateGpuLaunchCalls, mlir/lib/Conversion/GPUToSPIRV/ConvertGPUToSPIRV.cpp::success, mlir/lib/Conversion/GPUToVulkan/ConvertLaunchFuncToVulkanCalls.cpp::getLLVMDialect, mlir/lib/Conversion/LLVMCommon/Pattern.cpp::getTypeConverter, mlir/lib/Conversion/LLVMCommon/TypeConverter.cpp::conversion, mlir/lib/Conversion/LLVMCommon/TypeConverter.cpp::failure, mlir/lib/Conversion/LLVMCommon/TypeConverter.cpp::getPointerType, mlir/lib/Conversion/SCFToControlFlow/SCFToControlFlow.cpp::success, mlir/lib/Conversion/SCFToEmitC/SCFToEmitC.cpp::guard, mlir/lib/Conversion/SCFToEmitC/SCFToEmitC.cpp::success, mlir/lib/Conversion/SPIRVToLLVM/ConvertSPIRVToLLVM.cpp::failure, mlir/lib/Conversion/SPIRVToLLVM/ConvertSPIRVToLLVM.cpp::success, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::createIndexConstant, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::desc, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::failure, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::getDialect, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::success, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::transformed, mlir/lib/Conversion/StandardToLLVM/StandardToLLVM.cpp::unrankedDesc, mlir/lib/Conversion/VectorToLLVM/ConvertVectorToLLVM.cpp::success, mlir/lib/Dialect/AVX512/IR/AVX512Dialect.cpp::Dialect, mlir/lib/Dialect/Affine/IR/AffineOps.cpp::Dialect, mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp::Twine, mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp::dstAccess, mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp::failure, mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp::srcAccess, mlir/lib/Dialect/Affine/Transforms/LoopTiling.cpp::success, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::failure, mlir/lib/Dialect/ArmSME/Transforms/LegalizeForLLVMExport.cpp::success, mlir/lib/Dialect/EmitC/IR/EmitC.cpp::failure, mlir/lib/Dialect/EmitC/IR/EmitC.cpp::getUpperBound, mlir/lib/Dialect/EmitC/IR/EmitC.cpp::guard, mlir/lib/Dialect/EmitC/IR/EmitC.cpp::success, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::Dialect, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::emitError, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::stringifyEnum, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/Dialect/GPU/Transforms/ModuleToBinary.cpp::failure, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::builder, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::caps, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::exts, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::getDependentDialects, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::matcher, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::runOnOperation, mlir/lib/Dialect/GPU/Transforms/SPIRVAttachTarget.cpp::signalPassFailure, mlir/lib/Dialect/LLVMIR/IR/FunctionCallUtils.cpp::getCharPtr, mlir/lib/Dialect/LLVMIR/IR/FunctionCallUtils.cpp::getVoidPtr, mlir/lib/Dialect/LLVMIR/IR/LLVMAVX512Dialect.cpp::Dialect, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::Dialect, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::bufferRef, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::cantFail, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::emitOpError, mlir/lib/Dialect/LLVMIR/IR/LLVMDialect.cpp::success, mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp::RewritePattern, mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp::failure, mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp::foldMemRefCast, mlir/lib/Dialect/Linalg/IR/LinalgOps.cpp::success, mlir/lib/Dialect/Linalg/IR/LinalgTypes.cpp::Dialect, mlir/lib/Dialect/Linalg/Transforms/Transforms.cpp::failure, mlir/lib/Dialect/Linalg/Transforms/Transforms.cpp::substWithMin, mlir/lib/Dialect/Linalg/Transforms/Transforms.cpp::success, mlir/lib/Dialect/Mesh/Interfaces/ShardingInterface.cpp::failure, mlir/lib/Dialect/Mesh/Interfaces/ShardingInterface.cpp::success, mlir/lib/Dialect/Mesh/Transforms/ShardingPropagation.cpp::getOperationsVector, mlir/lib/Dialect/Mesh/Transforms/ShardingPropagation.cpp::getReversedOperationsVector, mlir/lib/Dialect/Mesh/Transforms/ShardingPropagation.cpp::signalPassFailure, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::Dialect, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::failure, mlir/lib/Dialect/OpenMP/IR/OpenMPDialect.cpp::success, mlir/lib/Dialect/Quant/IR/QuantOps.cpp::Dialect, mlir/lib/Dialect/SCF/SCF.cpp::Dialect, mlir/lib/Dialect/SCF/TransformOps/SCFTransformOps.cpp::emitSilenceableError, mlir/lib/Dialect/SCF/Transforms/Utils.cpp::values, mlir/lib/Dialect/SDBM/SDBMDialect.cpp::Dialect, mlir/lib/Dialect/SPIRV/IR/CooperativeMatrixOps.cpp::getCooperativeMatrixType, mlir/lib/Dialect/SPIRV/IR/CooperativeMatrixOps.cpp::success, mlir/lib/Dialect/SPIRV/IR/CooperativeMatrixOps.cpp::verifyCoopMatrixAccess, mlir/lib/Dialect/SPIRV/IR/CooperativeMatrixOps.cpp::verifyPointerAndCoopMatrixType, mlir/lib/Dialect/SPIRV/LayoutUtils.cpp::decorateType, mlir/lib/Dialect/SPIRV/SPIRVDialect.cpp::Dialect, mlir/lib/Dialect/SPIRV/SPIRVOps.cpp::success, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::TypeStorage, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::elementType, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getArrayedInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getDepthInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getDim, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getImageFormat, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getImpl, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getSamplerUseInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getSamplingInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getScope, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::getStorageClass, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::isValid, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::memberTypes, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::pointeeType, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setArrayedInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setDepthInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setDim, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setImageFormat, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setSamplerUseInfo, mlir/lib/Dialect/SPIRV/SPIRVTypes.cpp::setSamplingInfo, mlir/lib/Dialect/SPIRV/TargetAndABI.cpp::failure, mlir/lib/Dialect/Shape/IR/Shape.cpp::Dialect, mlir/lib/Dialect/Shape/IR/Shape.cpp::failure, mlir/lib/Dialect/StandardOps/IR/Ops.cpp::Dialect, mlir/lib/Dialect/Tosa/IR/ShardingInterfaceImpl.cpp::getIndexingMaps, mlir/lib/Dialect/Tosa/IR/ShardingInterfaceImpl.cpp::getLoopIteratorTypes, mlir/lib/Dialect/Tosa/IR/ShardingInterfaceImpl.cpp::registerElemwiseAll, mlir/lib/Dialect/Tosa/IR/ShardingInterfaceImpl.cpp::registerElemwiseOne, mlir/lib/Dialect/Tosa/IR/ShardingInterfaceImpl.cpp::types, mlir/lib/Dialect/Transform/IR/TransformDialect.cpp::ModuleOp, mlir/lib/Dialect/Transform/IR/Utils.cpp::InFlightDiagnostic, mlir/lib/Dialect/Transform/IR/Utils.cpp::canMergeInto, mlir/lib/Dialect/Transform/IR/Utils.cpp::otherSymbolTable, mlir/lib/Dialect/Transform/IR/Utils.cpp::targetSymbolTable, mlir/lib/Dialect/Transform/Transforms/InterpreterPass.cpp::signalPassFailure, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::ModuleOp, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::canMergeInto, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::emitError, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::failure, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::otherSymbolTable, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::rewriter, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::success, mlir/lib/Dialect/Transform/Transforms/TransformInterpreterUtils.cpp::targetSymbolTable, mlir/lib/Dialect/Vector/Transforms/LowerVectorContract.cpp::failure, mlir/lib/Dialect/Vector/VectorOps.cpp::Dialect, mlir/lib/Dialect/Vector/VectorTransforms.cpp::failure, mlir/lib/Dialect/Vector/VectorTransforms.cpp::pat3, mlir/lib/Dialect/Vector/VectorTransforms.cpp::success, mlir/lib/ExecutionEngine/ExecutionEngine.cpp::tsm, mlir/lib/IR/AffineExpr.cpp::getAffineBinaryOpExpr, mlir/lib/IR/AffineExpr.cpp::replace, mlir/lib/IR/AsmPrinter.cpp::printDialectAttribute, mlir/lib/IR/Builders.cpp::getArrayAttr, mlir/lib/IR/Builders.cpp::getDenseI32ArrayAttr, mlir/lib/IR/Dialect.cpp::name, mlir/lib/IR/MLIRContext.cpp::BuiltinDialect, mlir/lib/IR/MLIRContext.cpp::Dialect, mlir/lib/IR/MLIRContext.cpp::dialect, mlir/lib/IR/MLIRContext.cpp::getDialectNamespace, mlir/lib/IR/OperationSupport.cpp::TypeRange, mlir/lib/IR/StandardTypes.cpp::getImpl, mlir/lib/IR/TypeDetail.h::KeyTy, mlir/lib/IR/TypeDetail.h::ShapedTypeStorage, mlir/lib/IR/TypeDetail.h::TypeStorage, mlir/lib/IR/TypeDetail.h::getSignedness, mlir/lib/IR/TypeDetail.h::getSubclassData, mlir/lib/IR/TypeDetail.h::getWidth, mlir/lib/IR/TypeDetail.h::numInputs, mlir/lib/IR/TypeDetail.h::size, mlir/lib/IR/TypeDetail.h::unpackKeyBits, mlir/lib/IR/TypeDetail.h::width, mlir/lib/IR/TypeRange.cpp::TypeRange, mlir/lib/Support/StorageUniquer.cpp::getEmptyKey, mlir/lib/Support/StorageUniquer.cpp::getHashValue, mlir/lib/Support/StorageUniquer.cpp::getOrCreateUnsafe, mlir/lib/Support/StorageUniquer.cpp::getTombstoneKey, mlir/lib/Support/StorageUniquer.cpp::isEqual, mlir/lib/Support/StorageUniquer.cpp::lock, mlir/lib/Support/StorageUniquer.cpp::mutationFn, mlir/lib/Support/StorageUniquer.cpp::typeLock, mlir/lib/Target/Cpp/TranslateToCpp.cpp::failure, mlir/lib/Target/Cpp/TranslateToCpp.cpp::printOperation, mlir/lib/Target/Cpp/TranslateToCpp.cpp::success, mlir/lib/Target/LLVM/NVVM/Target.cpp::bin, mlir/lib/Target/LLVM/NVVM/Target.cpp::builder, mlir/lib/Target/LLVM/NVVM/Target.cpp::cubinFile, mlir/lib/Target/LLVM/ROCDL/Target.cpp::builder, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::createKernelLaunch, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::failure, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::getModuleLoadJITFn, mlir/lib/Target/LLVMIR/Dialect/GPU/SelectObjectAttr.cpp::getSelectedObject, mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp::append, mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp::fail, mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp::getArrayElementSizeInBits, mlir/lib/Target/LLVMIR/Dialect/OpenMP/OpenMPToLLVMIRTranslation.cpp::getSizeInBytes, mlir/lib/Target/LLVMIR/LLVMAVX512Intr.cpp::translateLLVMAVX512ModuleToLLVMIR, mlir/lib/Target/LLVMIR/ModuleTranslation.cpp::builder, mlir/lib/Target/LLVMIR/ModuleTranslation.cpp::lock, mlir/lib/Target/LLVMIR/ModuleTranslation.cpp::scopedLock, mlir/lib/Target/LLVMIR/TypeTranslation.cpp::TypeFromLLVMIRTranslator, mlir/lib/Target/LLVMIR/TypeTranslation.cpp::TypeToLLVMIRTranslator, mlir/lib/Target/LLVMIR/TypeTranslation.cpp::impl, mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp::processCooperativeMatrixType, mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp::processCooperativeMatrixTypeKHR, mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp::processCooperativeMatrixTypeNV, mlir/lib/Target/SPIRV/Deserialization/Deserializer.cpp::success, mlir/lib/Target/SPIRV/Deserialization/Deserializer.h::processCooperativeMatrixType, mlir/lib/Target/SPIRV/Deserialization/Deserializer.h::processCooperativeMatrixTypeKHR, mlir/lib/Target/SPIRV/Deserialization/Deserializer.h::processCooperativeMatrixTypeNV, mlir/lib/Target/SPIRV/Serialization/Serializer.cpp::failure, mlir/lib/Target/SPIRV/Serialization/Serializer.cpp::prepareConstantInt, mlir/lib/Target/SPIRV/Serialization/Serializer.cpp::success, mlir/lib/Target/SPIRV/Target.cpp::builder, mlir/test/CAPI/ir.c::collectStats, mlir/test/CAPI/ir.c::collectStatsSingle, mlir/test/CAPI/ir.c::main, mlir/test/CAPI/ir.c::makeAdd, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getArgument, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getDependentDialects, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::getDescription, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToCubin.cpp::registerTestGpuSerializeToCubinPass, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getArgument, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getDependentDialects, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::getDescription, mlir/test/lib/Dialect/GPU/TestConvertGPUKernelToHsaco.cpp::registerTestGpuSerializeToHsacoPass, mlir/test/lib/Dialect/LLVMIR/LLVMTypeTestDialect.cpp::getDialectNamespace, mlir/test/lib/Dialect/LLVMIR/LLVMTypeTestDialect.cpp::parseType, mlir/test/lib/Dialect/LLVMIR/LLVMTypeTestDialect.cpp::printType, mlir/test/lib/Dialect/LLVMIR/LLVMTypeTestDialect.cpp::registerLLVMTypeTestDialect, mlir/test/lib/Dialect/Test/TestDialect.cpp::Dialect, mlir/test/lib/Dialect/Test/TestTypes.h::kindof, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::failure, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::getArgument, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::initialize, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::parseConfig, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::registerTestBytecodeCallbackPasses, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::registerTestBytecodeRoundtripPasses, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::runTest6, mlir/test/lib/IR/TestBytecodeRoundtrip.cpp::success, mlir/test/lib/Target/TestLLVMTypeTranslation.cpp::registerTestLLVMTypeTranslation, mlir/test/lib/Target/TestLLVMTypeTranslation.cpp::success, mlir/test/lib/Transforms/TestLinalgTransforms.cpp::applyAffineMinSCFCanonicalizationPatterns, mlir/test/lib/Transforms/TestSCFUtils.cpp::TestSCFForUtilsPass, mlir/test/lib/Transforms/TestSCFUtils.cpp::TestSCFIfUtilsPass, mlir/test/lib/Transforms/TestSCFUtils.cpp::TestSCFUtilsPass, mlir/test/lib/Transforms/TestSCFUtils.cpp::runOnFunction, mlir/tools/mlir-opt/mlir-opt.cpp::registerLLVMTypeTestDialect, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestBytecodeCallbackPasses, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestBytecodeRoundtripPasses, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestGpuSerializeToCubinPass, mlir/tools/mlir-opt/mlir-opt.cpp::registerTestGpuSerializeToHsacoPass, mlir/tools/mlir-reduce/Passes/FunctionReducer.cpp::ReductionNode, mlir/tools/mlir-reduce/Passes/FunctionReducer.cpp::countFunctions, mlir/tools/mlir-reduce/ReductionNode.cpp::module, mlir/tools/mlir-reduce/ReductionNode.cpp::out, mlir/tools/mlir-reduce/ReductionNode.cpp::ptrVariant, mlir/tools/mlir-reduce/mlir-reduce.cpp::test, mlir/tools/mlir-rocm-runner/mlir-rocm-runner.cpp::compileModuleToROCDLIR, mlir/tools/mlir-tblgen/DialectGen.cpp::initialize, mlir/tools/mlir-tblgen/SPIRVUtilsGen.cpp::formatv, mlir/tools/mlir-translate/mlir-translate.cpp::registerLLVMTypeTestDialect, mlir/tools/mlir-translate/mlir-translate.cpp::registerTestLLVMTypeTranslation, mlir/unittests/IR/DialectTest.cpp::Dialect, mlir/unittests/IR/DialectTest.cpp::TestDialect, mlir/unittests/IR/DialectTest.cpp::getDialectNamespace, mlir/unittests/Target/LLVM/SerializeNVVMTarget.cpp::options, mlir/unittests/Target/LLVM/SerializeROCDLTarget.cpp::options, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AMDGPUKernel, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::Lock, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::getUseMultipleSdmaEngines, openmp/libomptarget/plugins-nextgen/amdgpu/src/rtl.cpp::useMultipleSdmaEngines, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::AsyncInfoWrapper, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::CUDAKernel, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionAddr, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::FunctionPtrs, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::Global, openmp/libomptarget/plugins-nextgen/cuda/src/rtl.cpp::callGlobalCtorDtorCommon, openmp/libomptarget/src/api.cpp::libomp_target_memcpy_async_helper, openmp/libomptarget/src/api.cpp::libomp_target_memcpy_async_task, openmp/libomptarget/src/api.cpp::libomp_target_memset_async_helper, openmp/libomptarget/src/api.cpp::libomp_target_memset_async_task, openmp/libomptarget/src/omptarget.cpp::AsyncInfo, openmp/libomptarget/src/omptarget.cpp::MapperArgSizes, openmp/libomptarget/src/omptarget.cpp::MapperArgTypes, openmp/libomptarget/src/omptarget.cpp::MapperArgs, openmp/libomptarget/src/omptarget.cpp::MapperArgsBase, openmp/libomptarget/test/api/omp_target_memset.c::main, openmp/libomptarget/test/libc/assert.c::main, openmp/libomptarget/test/libc/fwrite.c::main, openmp/libomptarget/test/libc/global_ctor_dtor.cpp::main, openmp/libomptarget/test/mapping/present/target_array_extension.c::main, openmp/libomptarget/test/mapping/present/target_data_array_extension.c::main, openmp/libomptarget/test/mapping/present/target_data_at_exit.c::main, openmp/libomptarget/test/mapping/present/target_update_array_extension.c::main, openmp/libomptarget/test/mapping/target_data_array_extension_at_exit.c::check_is_present, openmp/libomptarget/test/mapping/target_data_array_extension_at_exit.c::check_not_present, openmp/libomptarget/test/mapping/target_data_array_extension_at_exit.c::main, openmp/libomptarget/test/mapping/target_implicit_partial_map.c::main, openmp/libomptarget/test/mapping/target_update_array_extension.c::main, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::int, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::main, openmp/libomptarget/test/offloading/indirect_fp_mapping.c::square, openmp/libomptarget/test/offloading/task_in_reduction_target.c::main"}
{"input": "allocate codegen for sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush masked ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir masked ordered parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ordered parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir ordered parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush ir masked ordered parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate", "output": "bolt/include/bolt/Core/MCPlusBuilder.h::addEHInfo, bolt/include/bolt/Core/MCPlusBuilder.h::addGnuArgsSize, bolt/include/bolt/Core/MCPlusBuilder.h::clearOffset, bolt/include/bolt/Core/MCPlusBuilder.h::getAnnotationInstOp, bolt/include/bolt/Core/MCPlusBuilder.h::getFirstAnnotationOpIndex, bolt/include/bolt/Core/MCPlusBuilder.h::removeAnnotation, bolt/include/bolt/Core/MCPlusBuilder.h::removeAnnotationInst, bolt/include/bolt/Core/MCPlusBuilder.h::removeAnnotations, bolt/include/bolt/Core/MCPlusBuilder.h::setAnnotationOpValue, bolt/include/bolt/Core/MCPlusBuilder.h::setConditionalTailCall, bolt/include/bolt/Core/MCPlusBuilder.h::setOffset, bolt/include/bolt/Core/MCPlusBuilder.h::setTailCall, bolt/include/bolt/Core/MCPlusBuilder.h::stripAnnotations, bolt/include/bolt/Core/MCPlusBuilder.h::unsetConditionalTailCall, bolt/include/bolt/Core/MCPlusBuilder.h::unsetJumpTable, bolt/include/bolt/Core/MCPlusBuilder.h::updateEHInfo, clang/include/clang/AST/DeclBase.h::isLastReferenceInCoroutineParamMoves, clang/include/clang/AST/DeclBase.h::setLastReferenceInCoroutineParamMoves, clang/include/clang/AST/DeclBase.h::setReferenced, clang/include/clang/AST/Type.h::alignas, clang/include/clang/Sema/Sema.h::CheckCountedByAttr, clang/include/clang/Sema/Sema.h::DiagnoseUnusedParameters, clang/include/clang/Sema/TypoCorrection.h::CorrectionCandidateCallback, clang/include/clang/Sema/TypoCorrection.h::setTypoName, clang/lib/CodeGen/CGExpr.cpp::SanScope, clang/lib/CodeGen/CGOpenMPRuntimeGPU.h::clear, clang/lib/Sema/SemaDecl.cpp::SRV, clang/lib/Sema/SemaDecl.cpp::VisitStmt, clang/lib/Sema/SemaDeclAttr.cpp::CCC, clang/lib/Sema/SemaDeclAttr.cpp::FieldDeclValidatorCCC, clang/lib/Sema/SemaDeclAttr.cpp::Filter, clang/lib/Sema/SemaDeclAttr.cpp::MemResult, clang/lib/Sema/SemaDeclAttr.cpp::OrdResult, clang/lib/Sema/SemaDeclAttr.cpp::Result, clang/lib/Sema/SemaDeclAttr.cpp::ValidateCandidate, clang/lib/Sema/SemaDeclAttr.cpp::clone, clang/test/Analysis/taint-diagnostic-visitor.c::atoi, clang/test/Analysis/taint-generic.c::testStrlen, clang/test/Analysis/taint-generic.c::testStrlen_dont_propagate, clang/test/Analysis/taint-generic.c::testStrnlen, clang/test/Analysis/taint-generic.c::testStrnlen_dont_propagate, clang/test/Analysis/taint-generic.c::test_wchar_apis_dont_propagate, clang/test/Analysis/taint-generic.c::test_wchar_apis_propagate, clang/test/CodeGen/attr-counted-by.c::__counted_by, clang/test/CodeGen/attr-counted-by.c::test1, clang/test/CodeGen/attr-counted-by.c::test2, clang/test/CodeGen/attr-counted-by.c::test3, clang/test/CodeGen/attr-counted-by.c::test4, clang/test/Sema/attr-counted-by.c::__counted_by, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::await_ready, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::await_resume, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::await_suspend, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::bar, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::create_closure, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::final_suspend, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::foo, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::get_return_object, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::initial_suspend, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::return_void, clang/test/SemaCXX/warn-unused-parameters-coroutine.cpp::unhandled_exception, compiler-rt/lib/scudo/standalone/local_cache.h::initCacheMaybe, compiler-rt/lib/scudo/standalone/report.cpp::reportHeaderRace, compiler-rt/lib/scudo/standalone/report.h::reportHeaderRace, flang/include/flang/Optimizer/Builder/HLFIRTools.h::isPointer, flang/include/flang/Runtime/descriptor.h::ApplyMold, flang/include/flang/Semantics/tools.h::HasAllocatableDirectComponent, flang/include/flang/Semantics/tools.h::MayRequireFinalization, flang/lib/Evaluate/tools.cpp::IsAllocatable, flang/lib/Lower/ConvertExprToHLFIR.cpp::gen, flang/lib/Lower/ConvertVariable.cpp::hasFinalization, flang/lib/Lower/ConvertVariable.cpp::needEndFinalization, flang/lib/Semantics/expression.cpp::ConvertToType, flang/lib/Semantics/tools.cpp::HasAllocatableDirectComponent, flang/lib/Semantics/tools.cpp::IsFinalizable, flang/lib/Semantics/tools.cpp::MayRequireFinalization, flang/runtime/derived-api.cpp::CompareDerivedTypeNames, libcxx/include/__memory/shared_ptr.h::__on_zero_shared, libcxx/include/__memory/shared_ptr.h::__on_zero_shared_impl, libcxx/include/__memory/shared_ptr.h::__shared_ptr_emplace, libcxx/include/__memory/shared_ptr.h::__storage_, libcxx/include/__memory/shared_ptr.h::__tmp, libcxx/include/__memory/shared_ptr.h::constexpr, libcxx/test/libcxx/memory/shared_ptr_array.pass.cpp::main, libcxx/test/std/utilities/memory/util.smartptr/util.smartptr.shared/util.smartptr.shared.create/allocate_shared.pass.cpp::construct, lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/include/llvm/ADT/PagedVector.h::constexpr, llvm/include/llvm/Analysis/MemoryBuiltins.h::getAllocFnKind, llvm/lib/Analysis/MemoryBuiltins.cpp::getAllocFnKind, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/RISCV/RISCVFrameLowering.cpp::SortingObjects, llvm/lib/Target/RISCV/RISCVFrameLowering.cpp::isCompressibleLdOrSt, llvm/lib/Transforms/InstCombine/InstructionCombining.cpp::match, llvm/unittests/Transforms/Utils/CodeExtractorTest.cpp::CEAC, mlir/include/mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h::allocationDoesNotEscape, mlir/include/mlir/Dialect/Bufferization/IR/BufferizableOpInterface.h::isTensorYielded, mlir/include/mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h::gatherYieldedTensors, mlir/include/mlir/Dialect/Bufferization/Transforms/OneShotAnalysis.h::isTensorYielded, mlir/include/mlir/IR/SymbolTable.h::nameBuffer, mlir/include/mlir/Transforms/Passes.h::createBufferReusePass, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::guard, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::success, mlir/lib/Dialect/Bufferization/IR/BufferizableOpInterface.cpp::analysisState, mlir/lib/Dialect/Bufferization/IR/BufferizableOpInterface.cpp::success, mlir/lib/Dialect/Bufferization/IR/BufferizationDialect.cpp::success, mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp::emitOpError, mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp::failure, mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp::getDest, mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp::getDestMutable, mlir/lib/Dialect/Bufferization/IR/BufferizationOps.cpp::success, mlir/lib/Dialect/Bufferization/Transforms/FuncBufferizableOpInterfaceImpl.cpp::success, mlir/lib/Dialect/Bufferization/Transforms/OneShotAnalysis.cpp::domInfo, mlir/lib/Dialect/ControlFlow/Transforms/BufferizableOpInterfaceImpl.cpp::success, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::emitOpError, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::failure, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::isWorkgroupMemoryAddressSpace, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::stringifyEnum, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/Dialect/SCF/Transforms/BufferizableOpInterfaceImpl.cpp::success, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::constantIndex, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::failure, mlir/lib/Dialect/SparseTensor/Transforms/SparseTensorConversion.cpp::success, mlir/lib/Dialect/Tensor/Transforms/BufferizableOpInterfaceImpl.cpp::failure, mlir/lib/IR/SymbolTable.cpp::nameBuffer, mlir/lib/Transforms/BufferOptimizations.cpp::checkTypeCompatibility, mlir/lib/Transforms/BufferOptimizations.cpp::isRealUse, mlir/lib/Transforms/BufferOptimizations.cpp::isUsedBefore, mlir/lib/Transforms/BufferOptimizations.cpp::isUsedBeforePostDom, mlir/lib/Transforms/BufferOptimizations.cpp::usedInAliasBlock, openmp/libomptarget/test/offloading/parallel_target_teams_reduction.cpp::avec, openmp/libomptarget/test/offloading/parallel_target_teams_reduction.cpp::main"}
{"input": "allocate atomic codegen for ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast flush for masked parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen masked ordered parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "for ir runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush for ir ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast for ir masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for masked runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush ir ordered parse sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir ordered runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen masked ordered parse runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic flush masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast masked ordered runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush masked ordered parse parser sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir parser runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked parse parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir masked parse single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush for ir parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ordered parser sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic ir ordered parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate flush for masked ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic flush for ir masked ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush ir ordered parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate for ir ordered parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic flush runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast runtime", "output": "lld/ELF/SyntheticSections.cpp::SyntheticSection, lld/ELF/SyntheticSections.h::getSize, lld/ELF/SyntheticSections.h::writeTo, lld/ELF/Writer.cpp::getSectionRank, llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, mlir/include/mlir/IR/SymbolTable.h::nameBuffer, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::guard, mlir/lib/Conversion/GPUCommon/GPUOpsLowering.cpp::success, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::emitOpError, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::failure, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::isWorkgroupMemoryAddressSpace, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::stringifyEnum, mlir/lib/Dialect/GPU/IR/GPUDialect.cpp::success, mlir/lib/IR/SymbolTable.cpp::nameBuffer"}
{"input": "codegen flush ir ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic for ir parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir parse parser runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic for ir masked ordered parser runtime sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic ordered parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush for ir masked ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ordered sections single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen ir masked ordered sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen for masked target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush for ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen for masked parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush ir ordered parse parser single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic parser", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::cvtSMEMAtomic, llvm/lib/Target/AMDGPU/AsmParser/AMDGPUAsmParser.cpp::getPredicate"}
{"input": "allocate ast atomic flush for ordered parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ordered runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir parse parser runtime sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush masked parse runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen flush for ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for ir masked sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "flush parse parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for ir ordered runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush runtime sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic codegen flush for masked ordered parse parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush masked ordered sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic ir masked ordered runtime single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen flush ir sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "atomic ir masked parser runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen flush ordered parse runtime single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast atomic codegen for masked parse single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen masked parse runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir parse parser sections", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast flush ir ordered parser target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast codegen flush ir masked parse runtime", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast atomic codegen flush for ir parser sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate masked parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen for ir masked ordered parse", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate ast codegen flush for single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "ast ir parse parser requires", "output": "lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::initialValue, lldb/source/Plugins/SymbolFile/DWARF/DWARFASTParserClang.cpp::memberOffset"}
{"input": "ast codegen for ordered parse sections target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate atomic codegen flush ir ordered parse parser runtime sections single target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "codegen ir masked ordered parse parser single", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
{"input": "allocate codegen for ir masked ordered parse parser runtime target", "output": "llvm/lib/Target/AArch64/AArch64ISelLowering.cpp::shouldSinkVectorOfPtrs"}
